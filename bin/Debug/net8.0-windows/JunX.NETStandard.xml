<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JunX.NETStandard</name>
    </assembly>
    <members>
        <member name="T:JunX.NETStandard.EncryptionService.EncryptionService">
            <summary>
            Provides symmetric encryption and decryption services using AES, with keys derived from a user-supplied string.
            </summary>
            <remarks>
            This class generates a SHA256-based encryption key and an MD5-based initialization vector (IV) from the provided input string.
            It supports secure transformation of plaintext to encrypted Base64 strings and vice versa.
            Designed for scenarios requiring lightweight, consistent encryption logic across applications.
            </remarks>
        </member>
        <member name="M:JunX.NETStandard.EncryptionService.EncryptionService.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:JunX.NETStandard.EncryptionService.EncryptionService"/> class using the specified key string to derive encryption parameters.
            </summary>
            <param name="Key">
            A string used to generate the AES encryption key and initialization vector (IV).
            </param>
            <remarks>
            The provided key string is hashed using SHA256 to produce the encryption key and MD5 to produce the IV.
            This ensures consistent and deterministic cryptographic parameters for symmetric encryption and decryption.
            </remarks>
        </member>
        <member name="M:JunX.NETStandard.EncryptionService.EncryptionService.Encrypt(System.String)">
            <summary>
            Encrypts the specified plaintext string using AES and returns the result as a Base64-encoded string.
            </summary>
            <param name="Raw">
            The plaintext string to encrypt.
            </param>
            <returns>
            A Base64-encoded string representing the encrypted form of the input.
            </returns>
            <exception cref="T:JunX.NETStandard.EncryptionService.InvalidTextParameterException">
            Thrown when encryption fails due to invalid input or a cryptographic error.
            </exception>
            <remarks>
            This method uses AES encryption with a key and IV derived from the constructor input.
            The encrypted output is written to a memory stream and encoded as Base64 for safe transport or storage.
            </remarks>
        </member>
        <member name="M:JunX.NETStandard.EncryptionService.EncryptionService.Decrypt(System.String)">
            <summary>
            Decrypts the specified Base64-encoded string using AES and returns the original plaintext.
            </summary>
            <param name="Encrypted">
            A Base64-encoded string representing the encrypted data.
            </param>
            <returns>
            The decrypted plaintext string.
            </returns>
            <exception cref="T:JunX.NETStandard.EncryptionService.InvalidTextParameterException">
            Thrown when the input is not a valid Base64 string or when decryption fails due to invalid cryptographic parameters or corrupted data.
            </exception>
            <remarks>
            This method uses AES decryption with a key and IV derived from the constructor input.
            It expects the input to be a valid Base64 string produced by the <c>Encrypt</c> method.
            </remarks>
        </member>
        <member name="T:JunX.NETStandard.EncryptionService.InvalidTextParameterException">
            <summary>
            Represents errors that occur when text input is invalid or incompatible with encryption or decryption operations.
            </summary>
            <remarks>
            This custom exception is used to wrap cryptographic and formatting errors with domain-specific context.
            It supports default, message-only, and inner-exception constructors for flexible error handling.
            </remarks>
        </member>
        <member name="M:JunX.NETStandard.EncryptionService.InvalidTextParameterException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:JunX.NETStandard.EncryptionService.InvalidTextParameterException"/> class with no message or inner exception.
            </summary>
            <remarks>
            This constructor is useful when throwing a generic exception without additional context.
            </remarks>
        </member>
        <member name="M:JunX.NETStandard.EncryptionService.InvalidTextParameterException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:JunX.NETStandard.EncryptionService.InvalidTextParameterException"/> class with a specified error message.
            </summary>
            <param name="message">
            A descriptive message that explains the reason for the exception.
            </param>
            <remarks>
            Use this constructor to provide context-specific error details when throwing the exception.
            </remarks>
        </member>
        <member name="M:JunX.NETStandard.EncryptionService.InvalidTextParameterException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:JunX.NETStandard.EncryptionService.InvalidTextParameterException"/> class with a specified error message and a reference to the inner exception that caused this exception.
            </summary>
            <param name="message">
            A descriptive message that explains the reason for the exception.
            </param>
            <param name="inner">
            The exception that is the cause of the current exception, or a null reference if no inner exception is specified.
            </param>
            <remarks>
            Use this constructor to wrap lower-level exceptions with domain-specific context for encryption and decryption failures.
            </remarks>
        </member>
        <member name="M:JunX.NETStandard.EncryptionService.InvalidTextParameterException.ToString">
            <summary>
            Returns a string representation of the current <see cref="T:JunX.NETStandard.EncryptionService.InvalidTextParameterException"/> instance.
            </summary>
            <returns>
            A string that describes the exception, including the message and stack trace if available.
            </returns>
            <remarks>
            This override delegates to the base implementation and is useful for logging or debugging exception details.
            </remarks>
        </member>
        <member name="T:JunX.NETStandard.MySQL.BuilderExtensions">
            <summary>
            Provides MySQL Execution extentions to the SQLBuilder group of classes.
            These methods are to be used in conjunction with an instance of DBConnect Class assuming that the instance's internal MySqlConnection is initialized and is open.
            </summary>
        </member>
        <member name="M:JunX.NETStandard.MySQL.BuilderExtensions.ExecuteAdapter``1(JunX.NETStandard.SQLBuilder.SelectCommand{``0},JunX.NETStandard.MySQL.DBConnect)">
            <summary>
            Executes the composed SQL <c>SELECT</c> statement represented by the <see cref="T:JunX.NETStandard.SQLBuilder.SelectCommand`1"/> instance using the specified <see cref="T:JunX.NETStandard.MySQL.DBConnect"/> context and returns the result via a data adapter.
            </summary>
            <typeparam name="T">The enum type representing the table schema used in the query.</typeparam>
            <param name="SelectCMD">The <see cref="T:JunX.NETStandard.SQLBuilder.SelectCommand`1"/> instance containing the SQL query to execute.</param>
            <param name="DBC">The <see cref="T:JunX.NETStandard.MySQL.DBConnect"/> instance responsible for executing the query and managing the adapter logic.</param>
            <exception cref="T:System.Exception">
            Thrown when the delegated execution fails or the adapter encounters an error during processing.
            </exception>
        </member>
        <member name="M:JunX.NETStandard.MySQL.BuilderExtensions.ExecuteAdapter``1(JunX.NETStandard.SQLBuilder.SelectCommand{``0},JunX.NETStandard.MySQL.DBConnect,JunX.NETStandard.MySQL.ParametersMetadata)">
            <summary>
            Executes the composed SQL <c>SELECT</c> statement represented by the <see cref="T:JunX.NETStandard.SQLBuilder.SelectCommand`1"/> instance using the specified <see cref="T:JunX.NETStandard.MySQL.DBConnect"/> context and a single parameter, returning the result via a data adapter.
            </summary>
            <typeparam name="T">The enum type representing the table schema used in the query.</typeparam>
            <param name="SelectCMD">The <see cref="T:JunX.NETStandard.SQLBuilder.SelectCommand`1"/> instance containing the SQL query to execute.</param>
            <param name="DBC">The <see cref="T:JunX.NETStandard.MySQL.DBConnect"/> instance responsible for executing the query and managing the adapter logic.</param>
            <param name="Parameter">The parameter metadata containing the name and value to bind to the query.</param>
            <exception cref="T:System.Exception">
            Thrown when the delegated execution fails or the adapter encounters an error during processing.
            </exception>
        </member>
        <member name="M:JunX.NETStandard.MySQL.BuilderExtensions.ExecuteAdapter``1(JunX.NETStandard.SQLBuilder.SelectCommand{``0},JunX.NETStandard.MySQL.DBConnect,System.Collections.Generic.IEnumerable{JunX.NETStandard.MySQL.ParametersMetadata})">
            <summary>
            Executes the composed SQL <c>SELECT</c> statement represented by the <see cref="T:JunX.NETStandard.SQLBuilder.SelectCommand`1"/> instance using the specified <see cref="T:JunX.NETStandard.MySQL.DBConnect"/> context and a collection of parameters, returning the result via a data adapter.
            </summary>
            <typeparam name="T">The enum type representing the table schema used in the query.</typeparam>
            <param name="SelectCMD">The <see cref="T:JunX.NETStandard.SQLBuilder.SelectCommand`1"/> instance containing the SQL query to execute.</param>
            <param name="DBC">The <see cref="T:JunX.NETStandard.MySQL.DBConnect"/> instance responsible for executing the query and managing the adapter logic.</param>
            <param name="Parameters">A collection of parameter metadata objects, each specifying a name and value to bind to the query.</param>
            <exception cref="T:System.Exception">
            Thrown when the delegated execution fails or the adapter encounters an error during processing.
            </exception>
        </member>
        <member name="M:JunX.NETStandard.MySQL.BuilderExtensions.ExecuteAdapter``2(JunX.NETStandard.SQLBuilder.SelectCommand{``0,``1},JunX.NETStandard.MySQL.DBConnect)">
            <summary>
            Executes the composed SQL <c>SELECT</c> statement represented by the <see cref="T:JunX.NETStandard.SQLBuilder.SelectCommand`2"/> instance using the specified <see cref="T:JunX.NETStandard.MySQL.DBConnect"/> context and returns the result via a data adapter.
            </summary>
            <typeparam name="T">The primary enum type representing the main table schema.</typeparam>
            <typeparam name="J">The secondary enum type representing a joined or related table schema.</typeparam>
            <param name="SelectCMD">The <see cref="T:JunX.NETStandard.SQLBuilder.SelectCommand`2"/> instance containing the SQL query to execute.</param>
            <param name="DBC">The <see cref="T:JunX.NETStandard.MySQL.DBConnect"/> instance responsible for executing the query and managing the adapter logic.</param>
            <exception cref="T:System.Exception">
            Thrown when the delegated execution fails or the adapter encounters an error during processing.
            </exception>
        </member>
        <member name="M:JunX.NETStandard.MySQL.BuilderExtensions.ExecuteAdapter``2(JunX.NETStandard.SQLBuilder.SelectCommand{``0,``1},JunX.NETStandard.MySQL.DBConnect,JunX.NETStandard.MySQL.ParametersMetadata)">
            <summary>
            Executes the composed SQL <c>SELECT</c> statement represented by the <see cref="T:JunX.NETStandard.SQLBuilder.SelectCommand`2"/> instance using the specified <see cref="T:JunX.NETStandard.MySQL.DBConnect"/> context and a single parameter, returning the result via a data adapter.
            </summary>
            <typeparam name="T">The primary enum type representing the main table schema.</typeparam>
            <typeparam name="J">The secondary enum type representing a joined or related table schema.</typeparam>
            <param name="SelectCMD">The <see cref="T:JunX.NETStandard.SQLBuilder.SelectCommand`2"/> instance containing the SQL query to execute.</param>
            <param name="DBC">The <see cref="T:JunX.NETStandard.MySQL.DBConnect"/> instance responsible for executing the query and managing the adapter logic.</param>
            <param name="Parameter">The parameter metadata containing the name and value to bind to the query.</param>
            <exception cref="T:System.Exception">
            Thrown when the delegated execution fails or the adapter encounters an error during processing.
            </exception>
        </member>
        <member name="M:JunX.NETStandard.MySQL.BuilderExtensions.ExecuteAdapter``2(JunX.NETStandard.SQLBuilder.SelectCommand{``0,``1},JunX.NETStandard.MySQL.DBConnect,System.Collections.Generic.IEnumerable{JunX.NETStandard.MySQL.ParametersMetadata})">
            <summary>
            Executes the composed SQL <c>SELECT</c> statement represented by the <see cref="T:JunX.NETStandard.SQLBuilder.SelectCommand`2"/> instance using the specified <see cref="T:JunX.NETStandard.MySQL.DBConnect"/> context and a collection of parameters, returning the result via a data adapter.
            </summary>
            <typeparam name="T">The primary enum type representing the main table schema.</typeparam>
            <typeparam name="J">The secondary enum type representing a joined or related table schema.</typeparam>
            <param name="SelectCMD">The <see cref="T:JunX.NETStandard.SQLBuilder.SelectCommand`2"/> instance containing the SQL query to execute.</param>
            <param name="DBC">The <see cref="T:JunX.NETStandard.MySQL.DBConnect"/> instance responsible for executing the query and managing the adapter logic.</param>
            <param name="Parameters">A collection of parameter metadata objects, each specifying a name and value to bind to the query.</param>
            <exception cref="T:System.Exception">
            Thrown when the delegated execution fails or the adapter encounters an error during processing.
            </exception>
        </member>
        <member name="M:JunX.NETStandard.MySQL.BuilderExtensions.ExecuteAdapter(JunX.NETStandard.SQLBuilder.SelectCommand,JunX.NETStandard.MySQL.DBConnect)">
            <summary>
            Executes the composed SQL <c>SELECT</c> statement represented by the <see cref="T:JunX.NETStandard.SQLBuilder.SelectCommand"/> instance using the specified <see cref="T:JunX.NETStandard.MySQL.DBConnect"/> context and returns the result via a data adapter.
            </summary>
            <param name="SCMD">The <see cref="T:JunX.NETStandard.SQLBuilder.SelectCommand"/> instance containing the SQL query to execute.</param>
            <param name="DBC">The <see cref="T:JunX.NETStandard.MySQL.DBConnect"/> instance responsible for executing the query and managing the adapter logic.</param>
            <exception cref="T:System.Exception">
            Thrown when the delegated execution fails or the adapter encounters an error during processing.
            </exception>
        </member>
        <member name="M:JunX.NETStandard.MySQL.BuilderExtensions.ExecuteAdapter(JunX.NETStandard.SQLBuilder.SelectCommand,JunX.NETStandard.MySQL.DBConnect,JunX.NETStandard.MySQL.ParametersMetadata)">
            <summary>
            Executes the composed SQL <c>SELECT</c> statement represented by the <see cref="T:JunX.NETStandard.SQLBuilder.SelectCommand"/> instance using the specified <see cref="T:JunX.NETStandard.MySQL.DBConnect"/> context and a single parameter, returning the result via a data adapter.
            </summary>
            <param name="SCMD">The <see cref="T:JunX.NETStandard.SQLBuilder.SelectCommand"/> instance containing the SQL query to execute.</param>
            <param name="DBC">The <see cref="T:JunX.NETStandard.MySQL.DBConnect"/> instance responsible for executing the query and managing the adapter logic.</param>
            <param name="Parameter">The parameter metadata containing the name and value to bind to the query.</param>
            <exception cref="T:System.Exception">
            Thrown when the delegated execution fails or the adapter encounters an error during processing.
            </exception>
        </member>
        <member name="M:JunX.NETStandard.MySQL.BuilderExtensions.ExecuteAdapter(JunX.NETStandard.SQLBuilder.SelectCommand,JunX.NETStandard.MySQL.DBConnect,System.Collections.Generic.IEnumerable{JunX.NETStandard.MySQL.ParametersMetadata})">
            <summary>
            Executes the composed SQL <c>SELECT</c> statement represented by the <see cref="T:JunX.NETStandard.SQLBuilder.SelectCommand"/> instance using the specified <see cref="T:JunX.NETStandard.MySQL.DBConnect"/> context and a collection of parameters, returning the result via a data adapter.
            </summary>
            <param name="SCMD">The <see cref="T:JunX.NETStandard.SQLBuilder.SelectCommand"/> instance containing the SQL query to execute.</param>
            <param name="DBC">The <see cref="T:JunX.NETStandard.MySQL.DBConnect"/> instance responsible for executing the query and managing the adapter logic.</param>
            <param name="Parameters">A collection of parameter metadata objects, each specifying a name and value to bind to the query.</param>
            <exception cref="T:System.Exception">
            Thrown when the delegated execution fails or the adapter encounters an error during processing.
            </exception>
        </member>
        <member name="M:JunX.NETStandard.MySQL.BuilderExtensions.ExecuteDataSet``1(JunX.NETStandard.SQLBuilder.SelectCommand{``0},JunX.NETStandard.MySQL.DBConnect)">
            <summary>
            Executes the composed SQL <c>SELECT</c> statement represented by the <see cref="T:JunX.NETStandard.SQLBuilder.SelectCommand`1"/> instance using the specified <see cref="T:JunX.NETStandard.MySQL.DBConnect"/> context and returns the result as a <c>DataSet</c>.
            </summary>
            <typeparam name="T">The enum type representing the table schema used in the query.</typeparam>
            <param name="SCMD">The <see cref="T:JunX.NETStandard.SQLBuilder.SelectCommand`1"/> instance containing the SQL query to execute.</param>
            <param name="DBC">The <see cref="T:JunX.NETStandard.MySQL.DBConnect"/> instance responsible for executing the query and retrieving the <c>DataSet</c>.</param>
            <exception cref="T:System.Exception">
            Thrown when the delegated execution fails or the dataset retrieval encounters an error during processing.
            </exception>
        </member>
        <member name="M:JunX.NETStandard.MySQL.BuilderExtensions.ExecuteDataSet``1(JunX.NETStandard.SQLBuilder.SelectCommand{``0},JunX.NETStandard.MySQL.DBConnect,JunX.NETStandard.MySQL.ParametersMetadata)">
            <summary>
            Executes the composed SQL <c>SELECT</c> statement represented by the <see cref="T:JunX.NETStandard.SQLBuilder.SelectCommand`1"/> instance using the specified <see cref="T:JunX.NETStandard.MySQL.DBConnect"/> context and a single parameter, returning the result as a <c>DataSet</c>.
            </summary>
            <typeparam name="T">The enum type representing the table schema used in the query.</typeparam>
            <param name="SCMD">The <see cref="T:JunX.NETStandard.SQLBuilder.SelectCommand`1"/> instance containing the SQL query to execute.</param>
            <param name="DBC">The <see cref="T:JunX.NETStandard.MySQL.DBConnect"/> instance responsible for executing the query and retrieving the <c>DataSet</c>.</param>
            <param name="Parameter">The parameter metadata containing the name and value to bind to the query.</param>
            <exception cref="T:System.Exception">
            Thrown when the delegated execution fails or the dataset retrieval encounters an error during processing.
            </exception>
        </member>
        <member name="M:JunX.NETStandard.MySQL.BuilderExtensions.ExecuteDataSet``1(JunX.NETStandard.SQLBuilder.SelectCommand{``0},JunX.NETStandard.MySQL.DBConnect,System.Collections.Generic.IEnumerable{JunX.NETStandard.MySQL.ParametersMetadata})">
            <summary>
            Executes the composed SQL <c>SELECT</c> statement represented by the <see cref="T:JunX.NETStandard.SQLBuilder.SelectCommand`1"/> instance using the specified <see cref="T:JunX.NETStandard.MySQL.DBConnect"/> context and a collection of parameters, returning the result as a <c>DataSet</c>.
            </summary>
            <typeparam name="T">The enum type representing the table schema used in the query.</typeparam>
            <param name="SCMD">The <see cref="T:JunX.NETStandard.SQLBuilder.SelectCommand`1"/> instance containing the SQL query to execute.</param>
            <param name="DBC">The <see cref="T:JunX.NETStandard.MySQL.DBConnect"/> instance responsible for executing the query and retrieving the <c>DataSet</c>.</param>
            <param name="Parameters">A collection of parameter metadata objects, each specifying a name and value to bind to the query.</param>
            <exception cref="T:System.Exception">
            Thrown when the delegated execution fails or the dataset retrieval encounters an error during processing.
            </exception>
        </member>
        <member name="M:JunX.NETStandard.MySQL.BuilderExtensions.ExecuteDataSet``2(JunX.NETStandard.SQLBuilder.SelectCommand{``0,``1},JunX.NETStandard.MySQL.DBConnect)">
            <summary>
            Executes the composed SQL <c>SELECT</c> statement represented by the <see cref="T:JunX.NETStandard.SQLBuilder.SelectCommand`2"/> instance using the specified <see cref="T:JunX.NETStandard.MySQL.DBConnect"/> context and returns the result as a <c>DataSet</c>.
            </summary>
            <typeparam name="T">The primary enum type representing the main table schema.</typeparam>
            <typeparam name="J">The secondary enum type representing a joined or related table schema.</typeparam>
            <param name="SCMD">The <see cref="T:JunX.NETStandard.SQLBuilder.SelectCommand`2"/> instance containing the SQL query to execute.</param>
            <param name="DBC">The <see cref="T:JunX.NETStandard.MySQL.DBConnect"/> instance responsible for executing the query and retrieving the <c>DataSet</c>.</param>
            <exception cref="T:System.Exception">
            Thrown when the delegated execution fails or the dataset retrieval encounters an error during processing.
            </exception>
        </member>
        <member name="M:JunX.NETStandard.MySQL.BuilderExtensions.ExecuteDataSet``2(JunX.NETStandard.SQLBuilder.SelectCommand{``0,``1},JunX.NETStandard.MySQL.DBConnect,JunX.NETStandard.MySQL.ParametersMetadata)">
            <summary>
            Executes the composed SQL <c>SELECT</c> statement represented by the <see cref="T:JunX.NETStandard.SQLBuilder.SelectCommand`2"/> instance using the specified <see cref="T:JunX.NETStandard.MySQL.DBConnect"/> context and a single parameter, returning the result as a <c>DataSet</c>.
            </summary>
            <typeparam name="T">The primary enum type representing the main table schema.</typeparam>
            <typeparam name="J">The secondary enum type representing a joined or related table schema.</typeparam>
            <param name="SCMD">The <see cref="T:JunX.NETStandard.SQLBuilder.SelectCommand`2"/> instance containing the SQL query to execute.</param>
            <param name="DBC">The <see cref="T:JunX.NETStandard.MySQL.DBConnect"/> instance responsible for executing the query and retrieving the <c>DataSet</c>.</param>
            <param name="Parameter">The parameter metadata containing the name and value to bind to the query.</param>
            <exception cref="T:System.Exception">
            Thrown when the delegated execution fails or the dataset retrieval encounters an error during processing.
            </exception>
        </member>
        <member name="M:JunX.NETStandard.MySQL.BuilderExtensions.ExecuteDataSet``2(JunX.NETStandard.SQLBuilder.SelectCommand{``0,``1},JunX.NETStandard.MySQL.DBConnect,System.Collections.Generic.IEnumerable{JunX.NETStandard.MySQL.ParametersMetadata})">
            <summary>
            Executes the composed SQL <c>SELECT</c> statement represented by the <see cref="T:JunX.NETStandard.SQLBuilder.SelectCommand`2"/> instance using the specified <see cref="T:JunX.NETStandard.MySQL.DBConnect"/> context and a collection of parameters, returning the result as a <c>DataSet</c>.
            </summary>
            <typeparam name="T">The primary enum type representing the main table schema.</typeparam>
            <typeparam name="J">The secondary enum type representing a joined or related table schema.</typeparam>
            <param name="SCMD">The <see cref="T:JunX.NETStandard.SQLBuilder.SelectCommand`2"/> instance containing the SQL query to execute.</param>
            <param name="DBC">The <see cref="T:JunX.NETStandard.MySQL.DBConnect"/> instance responsible for executing the query and retrieving the <c>DataSet</c>.</param>
            <param name="Parameters">A collection of parameter metadata objects, each specifying a name and value to bind to the query.</param>
            <exception cref="T:System.Exception">
            Thrown when the delegated execution fails or the dataset retrieval encounters an error during processing.
            </exception>
        </member>
        <member name="M:JunX.NETStandard.MySQL.BuilderExtensions.ExecuteDataSet(JunX.NETStandard.SQLBuilder.SelectCommand,JunX.NETStandard.MySQL.DBConnect)">
            <summary>
            Executes the composed SQL <c>SELECT</c> statement represented by the <see cref="T:JunX.NETStandard.SQLBuilder.SelectCommand"/> instance using the specified <see cref="T:JunX.NETStandard.MySQL.DBConnect"/> context and returns the result as a <c>DataSet</c>.
            </summary>
            <param name="SCMD">The <see cref="T:JunX.NETStandard.SQLBuilder.SelectCommand"/> instance containing the SQL query to execute.</param>
            <param name="DBC">The <see cref="T:JunX.NETStandard.MySQL.DBConnect"/> instance responsible for executing the query and retrieving the <c>DataSet</c>.</param>
            <exception cref="T:System.Exception">
            Thrown when the delegated execution fails or the dataset retrieval encounters an error during processing.
            </exception>
        </member>
        <member name="M:JunX.NETStandard.MySQL.BuilderExtensions.ExecuteDataSet(JunX.NETStandard.SQLBuilder.SelectCommand,JunX.NETStandard.MySQL.DBConnect,JunX.NETStandard.MySQL.ParametersMetadata)">
            <summary>
            Executes the composed SQL <c>SELECT</c> statement represented by the <see cref="T:JunX.NETStandard.SQLBuilder.SelectCommand"/> instance using the specified <see cref="T:JunX.NETStandard.MySQL.DBConnect"/> context and a single parameter, returning the result as a <c>DataSet</c>.
            </summary>
            <param name="SCMD">The <see cref="T:JunX.NETStandard.SQLBuilder.SelectCommand"/> instance containing the SQL query to execute.</param>
            <param name="DBC">The <see cref="T:JunX.NETStandard.MySQL.DBConnect"/> instance responsible for executing the query and retrieving the <c>DataSet</c>.</param>
            <param name="Parameter">The parameter metadata containing the name and value to bind to the query.</param>
            <exception cref="T:System.Exception">
            Thrown when the delegated execution fails or the dataset retrieval encounters an error during processing.
            </exception>
        </member>
        <member name="M:JunX.NETStandard.MySQL.BuilderExtensions.ExecuteDataSet(JunX.NETStandard.SQLBuilder.SelectCommand,JunX.NETStandard.MySQL.DBConnect,System.Collections.Generic.IEnumerable{JunX.NETStandard.MySQL.ParametersMetadata})">
            <summary>
            Executes the composed SQL <c>SELECT</c> statement represented by the <see cref="T:JunX.NETStandard.SQLBuilder.SelectCommand"/> instance using the specified <see cref="T:JunX.NETStandard.MySQL.DBConnect"/> context and a collection of parameters, returning the result as a <c>DataSet</c>.
            </summary>
            <param name="SCMD">The <see cref="T:JunX.NETStandard.SQLBuilder.SelectCommand"/> instance containing the SQL query to execute.</param>
            <param name="DBC">The <see cref="T:JunX.NETStandard.MySQL.DBConnect"/> instance responsible for executing the query and retrieving the <c>DataSet</c>.</param>
            <param name="Parameters">A collection of parameter metadata objects, each specifying a name and value to bind to the query.</param>
            <exception cref="T:System.Exception">
            Thrown when the delegated execution fails or the dataset retrieval encounters an error during processing.
            </exception>
        </member>
        <member name="M:JunX.NETStandard.MySQL.BuilderExtensions.ExecuteNonQuery``1(JunX.NETStandard.SQLBuilder.DeleteCommand{``0},JunX.NETStandard.MySQL.DBConnect)">
            <summary>
            Executes the composed SQL <c>DELETE</c> statement represented by the <see cref="T:JunX.NETStandard.SQLBuilder.DeleteCommand`1"/> instance using the specified <see cref="T:JunX.NETStandard.MySQL.DBConnect"/> context.
            </summary>
            <typeparam name="T">The enum type representing the table schema used in the delete operation.</typeparam>
            <param name="DCMD">The <see cref="T:JunX.NETStandard.SQLBuilder.DeleteCommand`1"/> instance containing the SQL delete query to execute.</param>
            <param name="DBC">The <see cref="T:JunX.NETStandard.MySQL.DBConnect"/> instance responsible for executing the query.</param>
            <exception cref="T:System.Exception">
            Thrown when the delegated execution fails or the command encounters an error during processing.
            </exception>
        </member>
        <member name="M:JunX.NETStandard.MySQL.BuilderExtensions.ExecuteNonQuery``1(JunX.NETStandard.SQLBuilder.DeleteCommand{``0},JunX.NETStandard.MySQL.DBConnect,JunX.NETStandard.MySQL.ParametersMetadata)">
            <summary>
            Executes the composed SQL <c>DELETE</c> statement represented by the <see cref="T:JunX.NETStandard.SQLBuilder.DeleteCommand`1"/> instance using the specified <see cref="T:JunX.NETStandard.MySQL.DBConnect"/> context and a single parameter.
            </summary>
            <typeparam name="T">The enum type representing the table schema used in the delete operation.</typeparam>
            <param name="DCMD">The <see cref="T:JunX.NETStandard.SQLBuilder.DeleteCommand`1"/> instance containing the SQL delete query to execute.</param>
            <param name="DBC">The <see cref="T:JunX.NETStandard.MySQL.DBConnect"/> instance responsible for executing the query.</param>
            <param name="Parameter">The parameter metadata containing the name and value to bind to the query.</param>
            <exception cref="T:System.Exception">
            Thrown when the delegated execution fails or the command encounters an error during processing.
            </exception>
        </member>
        <member name="M:JunX.NETStandard.MySQL.BuilderExtensions.ExecuteNonQuery``1(JunX.NETStandard.SQLBuilder.DeleteCommand{``0},JunX.NETStandard.MySQL.DBConnect,System.Collections.Generic.IEnumerable{JunX.NETStandard.MySQL.ParametersMetadata})">
            <summary>
            Executes the composed SQL <c>DELETE</c> statement represented by the <see cref="T:JunX.NETStandard.SQLBuilder.DeleteCommand`1"/> instance using the specified <see cref="T:JunX.NETStandard.MySQL.DBConnect"/> context and a collection of parameters.
            </summary>
            <typeparam name="T">The enum type representing the table schema used in the delete operation.</typeparam>
            <param name="DCMD">The <see cref="T:JunX.NETStandard.SQLBuilder.DeleteCommand`1"/> instance containing the SQL delete query to execute.</param>
            <param name="DBC">The <see cref="T:JunX.NETStandard.MySQL.DBConnect"/> instance responsible for executing the query.</param>
            <param name="Parameters">A collection of parameter metadata objects, each specifying a name and value to bind to the query.</param>
            <exception cref="T:System.Exception">
            Thrown when the delegated execution fails or the command encounters an error during processing.
            </exception>
        </member>
        <member name="M:JunX.NETStandard.MySQL.BuilderExtensions.ExecuteNonQuery(JunX.NETStandard.SQLBuilder.DeleteCommand,JunX.NETStandard.MySQL.DBConnect)">
            <summary>
            Executes the composed SQL <c>DELETE</c> statement represented by the <see cref="T:JunX.NETStandard.SQLBuilder.DeleteCommand"/> instance using the specified <see cref="T:JunX.NETStandard.MySQL.DBConnect"/> context.
            </summary>
            <param name="DCMD">The <see cref="T:JunX.NETStandard.SQLBuilder.DeleteCommand"/> instance containing the SQL delete query to execute.</param>
            <param name="DBC">The <see cref="T:JunX.NETStandard.MySQL.DBConnect"/> instance responsible for executing the query.</param>
            <exception cref="T:System.Exception">
            Thrown when the delegated execution fails or the command encounters an error during processing.
            </exception>
        </member>
        <member name="M:JunX.NETStandard.MySQL.BuilderExtensions.ExecuteNonQuery(JunX.NETStandard.SQLBuilder.DeleteCommand,JunX.NETStandard.MySQL.DBConnect,JunX.NETStandard.MySQL.ParametersMetadata)">
            <summary>
            Executes the composed SQL <c>DELETE</c> statement represented by the <see cref="T:JunX.NETStandard.SQLBuilder.DeleteCommand"/> instance using the specified <see cref="T:JunX.NETStandard.MySQL.DBConnect"/> context and a single parameter.
            </summary>
            <param name="DCMD">The <see cref="T:JunX.NETStandard.SQLBuilder.DeleteCommand"/> instance containing the SQL delete query to execute.</param>
            <param name="DBC">The <see cref="T:JunX.NETStandard.MySQL.DBConnect"/> instance responsible for executing the query.</param>
            <param name="Parameter">The parameter metadata containing the name and value to bind to the query.</param>
            <exception cref="T:System.Exception">
            Thrown when the delegated execution fails or the command encounters an error during processing.
            </exception>
        </member>
        <member name="M:JunX.NETStandard.MySQL.BuilderExtensions.ExecuteNonQuery(JunX.NETStandard.SQLBuilder.DeleteCommand,JunX.NETStandard.MySQL.DBConnect,System.Collections.Generic.IEnumerable{JunX.NETStandard.MySQL.ParametersMetadata})">
            <summary>
            Executes the composed SQL <c>DELETE</c> statement represented by the <see cref="T:JunX.NETStandard.SQLBuilder.DeleteCommand"/> instance using the specified <see cref="T:JunX.NETStandard.MySQL.DBConnect"/> context and a collection of parameters.
            </summary>
            <param name="DCMD">The <see cref="T:JunX.NETStandard.SQLBuilder.DeleteCommand"/> instance containing the SQL delete query to execute.</param>
            <param name="DBC">The <see cref="T:JunX.NETStandard.MySQL.DBConnect"/> instance responsible for executing the query.</param>
            <param name="Parameters">A collection of parameter metadata objects, each specifying a name and value to bind to the query.</param>
            <exception cref="T:System.Exception">
            Thrown when the delegated execution fails or the command encounters an error during processing.
            </exception>
        </member>
        <member name="M:JunX.NETStandard.MySQL.BuilderExtensions.ExecuteNonQuery``1(JunX.NETStandard.SQLBuilder.InsertIntoCommand{``0},JunX.NETStandard.MySQL.DBConnect)">
            <summary>
            Executes the composed SQL <c>INSERT INTO</c> statement represented by the <see cref="T:JunX.NETStandard.SQLBuilder.InsertIntoCommand`1"/> instance using the specified <see cref="T:JunX.NETStandard.MySQL.DBConnect"/> context.
            </summary>
            <typeparam name="T">The enum type representing the table schema used in the insert operation.</typeparam>
            <param name="ICMD">The <see cref="T:JunX.NETStandard.SQLBuilder.InsertIntoCommand`1"/> instance containing the SQL insert query to execute.</param>
            <param name="DBC">The <see cref="T:JunX.NETStandard.MySQL.DBConnect"/> instance responsible for executing the query.</param>
            <exception cref="T:System.Exception">
            Thrown when the delegated execution fails or the command encounters an error during processing.
            </exception>
        </member>
        <member name="M:JunX.NETStandard.MySQL.BuilderExtensions.ExecuteNonQuery``1(JunX.NETStandard.SQLBuilder.InsertIntoCommand{``0},JunX.NETStandard.MySQL.DBConnect,JunX.NETStandard.MySQL.ParametersMetadata)">
            <summary>
            Executes the composed SQL <c>INSERT INTO</c> statement represented by the <see cref="T:JunX.NETStandard.SQLBuilder.InsertIntoCommand`1"/> instance using the specified <see cref="T:JunX.NETStandard.MySQL.DBConnect"/> context and a single parameter.
            </summary>
            <typeparam name="T">The enum type representing the table schema used in the insert operation.</typeparam>
            <param name="ICMD">The <see cref="T:JunX.NETStandard.SQLBuilder.InsertIntoCommand`1"/> instance containing the SQL insert query to execute.</param>
            <param name="DBC">The <see cref="T:JunX.NETStandard.MySQL.DBConnect"/> instance responsible for executing the query.</param>
            <param name="Parameter">The parameter metadata containing the name and value to bind to the query.</param>
            <exception cref="T:System.Exception">
            Thrown when the delegated execution fails or the command encounters an error during processing.
            </exception>
        </member>
        <member name="M:JunX.NETStandard.MySQL.BuilderExtensions.ExecuteNonQuery``1(JunX.NETStandard.SQLBuilder.InsertIntoCommand{``0},JunX.NETStandard.MySQL.DBConnect,System.Collections.Generic.IEnumerable{JunX.NETStandard.MySQL.ParametersMetadata})">
            <summary>
            Executes the composed SQL <c>INSERT INTO</c> statement represented by the <see cref="T:JunX.NETStandard.SQLBuilder.InsertIntoCommand`1"/> instance using the specified <see cref="T:JunX.NETStandard.MySQL.DBConnect"/> context and a collection of parameters.
            </summary>
            <typeparam name="T">The enum type representing the table schema used in the insert operation.</typeparam>
            <param name="ICMD">The <see cref="T:JunX.NETStandard.SQLBuilder.InsertIntoCommand`1"/> instance containing the SQL insert query to execute.</param>
            <param name="DBC">The <see cref="T:JunX.NETStandard.MySQL.DBConnect"/> instance responsible for executing the query.</param>
            <param name="Parameters">A collection of parameter metadata objects, each specifying a name and value to bind to the query.</param>
            <exception cref="T:System.Exception">
            Thrown when the delegated execution fails or the command encounters an error during processing.
            </exception>
        </member>
        <member name="M:JunX.NETStandard.MySQL.BuilderExtensions.ExecuteNonQuery(JunX.NETStandard.SQLBuilder.InsertIntoCommand,JunX.NETStandard.MySQL.DBConnect)">
            <summary>
            Executes the composed SQL <c>INSERT INTO</c> statement represented by the <see cref="T:JunX.NETStandard.SQLBuilder.InsertIntoCommand"/> instance using the specified <see cref="T:JunX.NETStandard.MySQL.DBConnect"/> context.
            </summary>
            <param name="ICMD">The <see cref="T:JunX.NETStandard.SQLBuilder.InsertIntoCommand"/> instance containing the SQL insert query to execute.</param>
            <param name="DBC">The <see cref="T:JunX.NETStandard.MySQL.DBConnect"/> instance responsible for executing the query.</param>
            <exception cref="T:System.Exception">
            Thrown when the delegated execution fails or the command encounters an error during processing.
            </exception>
        </member>
        <member name="M:JunX.NETStandard.MySQL.BuilderExtensions.ExecuteNonQuery(JunX.NETStandard.SQLBuilder.InsertIntoCommand,JunX.NETStandard.MySQL.DBConnect,JunX.NETStandard.MySQL.ParametersMetadata)">
            <summary>
            Executes the composed SQL <c>INSERT INTO</c> statement represented by the <see cref="T:JunX.NETStandard.SQLBuilder.InsertIntoCommand"/> instance using the specified <see cref="T:JunX.NETStandard.MySQL.DBConnect"/> context and a single parameter.
            </summary>
            <param name="ICMD">The <see cref="T:JunX.NETStandard.SQLBuilder.InsertIntoCommand"/> instance containing the SQL insert query to execute.</param>
            <param name="DBC">The <see cref="T:JunX.NETStandard.MySQL.DBConnect"/> instance responsible for executing the query.</param>
            <param name="Parameter">The parameter metadata containing the name and value to bind to the query.</param>
            <exception cref="T:System.Exception">
            Thrown when the delegated execution fails or the command encounters an error during processing.
            </exception>
        </member>
        <member name="M:JunX.NETStandard.MySQL.BuilderExtensions.ExecuteNonQuery(JunX.NETStandard.SQLBuilder.InsertIntoCommand,JunX.NETStandard.MySQL.DBConnect,System.Collections.Generic.IEnumerable{JunX.NETStandard.MySQL.ParametersMetadata})">
            <summary>
            Executes the composed SQL <c>INSERT INTO</c> statement represented by the <see cref="T:JunX.NETStandard.SQLBuilder.InsertIntoCommand"/> instance using the specified <see cref="T:JunX.NETStandard.MySQL.DBConnect"/> context and a collection of parameters.
            </summary>
            <param name="ICMD">The <see cref="T:JunX.NETStandard.SQLBuilder.InsertIntoCommand"/> instance containing the SQL insert query to execute.</param>
            <param name="DBC">The <see cref="T:JunX.NETStandard.MySQL.DBConnect"/> instance responsible for executing the query.</param>
            <param name="Parameters">A collection of parameter metadata objects, each specifying a name and value to bind to the query.</param>
            <exception cref="T:System.Exception">
            Thrown when the delegated execution fails or the command encounters an error during processing.
            </exception>
        </member>
        <member name="M:JunX.NETStandard.MySQL.BuilderExtensions.ExecuteNonQuery``1(JunX.NETStandard.SQLBuilder.UpdateCommand{``0},JunX.NETStandard.MySQL.DBConnect)">
            <summary>
            Executes the composed SQL <c>UPDATE</c> statement represented by the <see cref="T:JunX.NETStandard.SQLBuilder.UpdateCommand`1"/> instance using the specified <see cref="T:JunX.NETStandard.MySQL.DBConnect"/> context.
            </summary>
            <typeparam name="T">The enum type representing the table schema used in the update operation.</typeparam>
            <param name="UCMD">The <see cref="T:JunX.NETStandard.SQLBuilder.UpdateCommand`1"/> instance containing the SQL update query to execute.</param>
            <param name="DBC">The <see cref="T:JunX.NETStandard.MySQL.DBConnect"/> instance responsible for executing the query.</param>
            <exception cref="T:System.Exception">
            Thrown when the delegated execution fails or the command encounters an error during processing.
            </exception>
        </member>
        <member name="M:JunX.NETStandard.MySQL.BuilderExtensions.ExecuteNonQuery``1(JunX.NETStandard.SQLBuilder.UpdateCommand{``0},JunX.NETStandard.MySQL.DBConnect,JunX.NETStandard.MySQL.ParametersMetadata)">
            <summary>
            Executes the composed SQL <c>UPDATE</c> statement represented by the <see cref="T:JunX.NETStandard.SQLBuilder.UpdateCommand`1"/> instance using the specified <see cref="T:JunX.NETStandard.MySQL.DBConnect"/> context and a single parameter.
            </summary>
            <typeparam name="T">The enum type representing the table schema used in the update operation.</typeparam>
            <param name="UCMD">The <see cref="T:JunX.NETStandard.SQLBuilder.UpdateCommand`1"/> instance containing the SQL update query to execute.</param>
            <param name="DBC">The <see cref="T:JunX.NETStandard.MySQL.DBConnect"/> instance responsible for executing the query.</param>
            <param name="Parameter">The parameter metadata containing the name and value to bind to the query.</param>
            <exception cref="T:System.Exception">
            Thrown when the delegated execution fails or the command encounters an error during processing.
            </exception>
        </member>
        <member name="M:JunX.NETStandard.MySQL.BuilderExtensions.ExecuteNonQuery``1(JunX.NETStandard.SQLBuilder.UpdateCommand{``0},JunX.NETStandard.MySQL.DBConnect,System.Collections.Generic.IEnumerable{JunX.NETStandard.MySQL.ParametersMetadata})">
            <summary>
            Executes the composed SQL <c>UPDATE</c> statement represented by the <see cref="T:JunX.NETStandard.SQLBuilder.UpdateCommand`1"/> instance using the specified <see cref="T:JunX.NETStandard.MySQL.DBConnect"/> context and a collection of parameters.
            </summary>
            <typeparam name="T">The enum type representing the table schema used in the update operation.</typeparam>
            <param name="UCMD">The <see cref="T:JunX.NETStandard.SQLBuilder.UpdateCommand`1"/> instance containing the SQL update query to execute.</param>
            <param name="DBC">The <see cref="T:JunX.NETStandard.MySQL.DBConnect"/> instance responsible for executing the query.</param>
            <param name="Parameters">A collection of parameter metadata objects, each specifying a name and value to bind to the query.</param>
            <exception cref="T:System.Exception">
            Thrown when the delegated execution fails or the command encounters an error during processing.
            </exception>
        </member>
        <member name="M:JunX.NETStandard.MySQL.BuilderExtensions.ExecuteNonQuery(JunX.NETStandard.SQLBuilder.UpdateCommand,JunX.NETStandard.MySQL.DBConnect)">
            <summary>
            Executes the composed SQL <c>UPDATE</c> statement represented by the <see cref="T:JunX.NETStandard.SQLBuilder.UpdateCommand"/> instance using the specified <see cref="T:JunX.NETStandard.MySQL.DBConnect"/> context.
            </summary>
            <param name="UCMD">The <see cref="T:JunX.NETStandard.SQLBuilder.UpdateCommand"/> instance containing the SQL update query to execute.</param>
            <param name="DBC">The <see cref="T:JunX.NETStandard.MySQL.DBConnect"/> instance responsible for executing the query.</param>
            <exception cref="T:System.Exception">
            Thrown when the delegated execution fails or the command encounters an error during processing.
            </exception>
        </member>
        <member name="M:JunX.NETStandard.MySQL.BuilderExtensions.ExecuteNonQuery(JunX.NETStandard.SQLBuilder.UpdateCommand,JunX.NETStandard.MySQL.DBConnect,JunX.NETStandard.MySQL.ParametersMetadata)">
            <summary>
            Executes the composed SQL <c>UPDATE</c> statement represented by the <see cref="T:JunX.NETStandard.SQLBuilder.UpdateCommand"/> instance using the specified <see cref="T:JunX.NETStandard.MySQL.DBConnect"/> context and a single parameter.
            </summary>
            <param name="UCMD">The <see cref="T:JunX.NETStandard.SQLBuilder.UpdateCommand"/> instance containing the SQL update query to execute.</param>
            <param name="DBC">The <see cref="T:JunX.NETStandard.MySQL.DBConnect"/> instance responsible for executing the query.</param>
            <param name="Parameter">The parameter metadata containing the name and value to bind to the query.</param>
            <exception cref="T:System.Exception">
            Thrown when the delegated execution fails or the command encounters an error during processing.
            </exception>
        </member>
        <member name="M:JunX.NETStandard.MySQL.BuilderExtensions.ExecuteNonQuery(JunX.NETStandard.SQLBuilder.UpdateCommand,JunX.NETStandard.MySQL.DBConnect,System.Collections.Generic.IEnumerable{JunX.NETStandard.MySQL.ParametersMetadata})">
            <summary>
            Executes the composed SQL <c>UPDATE</c> statement represented by the <see cref="T:JunX.NETStandard.SQLBuilder.UpdateCommand"/> instance using the specified <see cref="T:JunX.NETStandard.MySQL.DBConnect"/> context and a collection of parameters.
            </summary>
            <param name="UCMD">The <see cref="T:JunX.NETStandard.SQLBuilder.UpdateCommand"/> instance containing the SQL update query to execute.</param>
            <param name="DBC">The <see cref="T:JunX.NETStandard.MySQL.DBConnect"/> instance responsible for executing the query.</param>
            <param name="Parameters">A collection of parameter metadata objects, each specifying a name and value to bind to the query.</param>
            <exception cref="T:System.Exception">
            Thrown when the delegated execution fails or the command encounters an error during processing.
            </exception>
        </member>
        <member name="M:JunX.NETStandard.MySQL.BuilderExtensions.ExecuteNonQuery``1(JunX.NETStandard.SQLBuilder.TruncateCommand{``0},JunX.NETStandard.MySQL.DBConnect)">
            <summary>
            Executes the composed SQL <c>TRUNCATE</c> statement represented by the <see cref="T:JunX.NETStandard.SQLBuilder.TruncateCommand`1"/> instance using the specified <see cref="T:JunX.NETStandard.MySQL.DBConnect"/> context.
            </summary>
            <typeparam name="T">The enum type representing the table schema targeted by the truncate operation.</typeparam>
            <param name="TCMD">The <see cref="T:JunX.NETStandard.SQLBuilder.TruncateCommand`1"/> instance containing the SQL truncate query to execute.</param>
            <param name="DBC">The <see cref="T:JunX.NETStandard.MySQL.DBConnect"/> instance responsible for executing the query.</param>
            <exception cref="T:System.Exception">
            Thrown when the delegated execution fails or the command encounters an error during processing.
            </exception>
        </member>
        <member name="M:JunX.NETStandard.MySQL.BuilderExtensions.ExecuteNonQuery(JunX.NETStandard.SQLBuilder.TruncateCommand,JunX.NETStandard.MySQL.DBConnect)">
            <summary>
            Executes the composed SQL <c>TRUNCATE</c> statement represented by the <see cref="T:JunX.NETStandard.SQLBuilder.TruncateCommand"/> instance using the specified <see cref="T:JunX.NETStandard.MySQL.DBConnect"/> context.
            </summary>
            <param name="TCMD">The <see cref="T:JunX.NETStandard.SQLBuilder.TruncateCommand"/> instance containing the SQL truncate query to execute.</param>
            <param name="DBC">The <see cref="T:JunX.NETStandard.MySQL.DBConnect"/> instance responsible for executing the query.</param>
            <exception cref="T:System.Exception">
            Thrown when the delegated execution fails or the command encounters an error during processing.
            </exception>
        </member>
        <member name="M:JunX.NETStandard.MySQL.BuilderExtensions.ExecuteReader``1(JunX.NETStandard.SQLBuilder.SelectCommand{``0},JunX.NETStandard.MySQL.DBConnect)">
            <summary>
            Executes the composed SQL <c>SELECT</c> statement represented by the <see cref="T:JunX.NETStandard.SQLBuilder.SelectCommand`1"/> instance using the specified <see cref="T:JunX.NETStandard.MySQL.DBConnect"/> context.
            </summary>
            <typeparam name="T">The enum type representing the table schema used in the query.</typeparam>
            <param name="SelectCMD">The <see cref="T:JunX.NETStandard.SQLBuilder.SelectCommand`1"/> instance containing the SQL query to execute.</param>
            <param name="DBC">The <see cref="T:JunX.NETStandard.MySQL.DBConnect"/> instance responsible for executing the query.</param>
            <exception cref="T:System.Exception">
            Thrown when the delegated execution fails or the reader encounters an error during processing.
            </exception>
        </member>
        <member name="M:JunX.NETStandard.MySQL.BuilderExtensions.ExecuteReader``1(JunX.NETStandard.SQLBuilder.SelectCommand{``0},JunX.NETStandard.MySQL.DBConnect,JunX.NETStandard.MySQL.ParametersMetadata)">
            <summary>
            Executes the composed SQL <c>SELECT</c> statement represented by the <see cref="T:JunX.NETStandard.SQLBuilder.SelectCommand`1"/> instance using the specified <see cref="T:JunX.NETStandard.MySQL.DBConnect"/> context and a single parameter.
            </summary>
            <typeparam name="T">The enum type representing the table schema used in the query.</typeparam>
            <param name="SelectCMD">The <see cref="T:JunX.NETStandard.SQLBuilder.SelectCommand`1"/> instance containing the SQL query to execute.</param>
            <param name="DBC">The <see cref="T:JunX.NETStandard.MySQL.DBConnect"/> instance responsible for executing the query.</param>
            <param name="Parameter">The parameter metadata containing the name and value to bind to the query.</param>
            <exception cref="T:System.Exception">
            Thrown when the delegated execution fails or the reader encounters an error during processing.
            </exception>
        </member>
        <member name="M:JunX.NETStandard.MySQL.BuilderExtensions.ExecuteReader``1(JunX.NETStandard.SQLBuilder.SelectCommand{``0},JunX.NETStandard.MySQL.DBConnect,System.Collections.Generic.IEnumerable{JunX.NETStandard.MySQL.ParametersMetadata})">
            <summary>
            Executes the composed SQL <c>SELECT</c> statement represented by the <see cref="T:JunX.NETStandard.SQLBuilder.SelectCommand`1"/> instance using the specified <see cref="T:JunX.NETStandard.MySQL.DBConnect"/> context and a collection of parameters.
            </summary>
            <typeparam name="T">The enum type representing the table schema used in the query.</typeparam>
            <param name="SelectCMD">The <see cref="T:JunX.NETStandard.SQLBuilder.SelectCommand`1"/> instance containing the SQL query to execute.</param>
            <param name="DBC">The <see cref="T:JunX.NETStandard.MySQL.DBConnect"/> instance responsible for executing the query.</param>
            <param name="Parameters">A collection of parameter metadata objects, each specifying a name and value to bind to the query.</param>
            <exception cref="T:System.Exception">
            Thrown when the delegated execution fails or the reader encounters an error during processing.
            </exception>
        </member>
        <member name="M:JunX.NETStandard.MySQL.BuilderExtensions.ExecuteReader``2(JunX.NETStandard.SQLBuilder.SelectCommand{``0,``1},JunX.NETStandard.MySQL.DBConnect)">
            <summary>
            Executes the composed SQL <c>SELECT</c> statement represented by the <see cref="T:JunX.NETStandard.SQLBuilder.SelectCommand`2"/> instance using the specified <see cref="T:JunX.NETStandard.MySQL.DBConnect"/> context.
            </summary>
            <typeparam name="T">The primary enum type representing the main table schema.</typeparam>
            <typeparam name="J">The secondary enum type representing a joined or related table schema.</typeparam>
            <param name="SelectCMD">The <see cref="T:JunX.NETStandard.SQLBuilder.SelectCommand`2"/> instance containing the SQL query to execute.</param>
            <param name="DBC">The <see cref="T:JunX.NETStandard.MySQL.DBConnect"/> instance responsible for executing the query.</param>
            <exception cref="T:System.Exception">
            Thrown when the delegated execution fails or the reader encounters an error during processing.
            </exception>
        </member>
        <member name="M:JunX.NETStandard.MySQL.BuilderExtensions.ExecuteReader``2(JunX.NETStandard.SQLBuilder.SelectCommand{``0,``1},JunX.NETStandard.MySQL.DBConnect,JunX.NETStandard.MySQL.ParametersMetadata)">
            <summary>
            Executes the composed SQL <c>SELECT</c> statement represented by the <see cref="T:JunX.NETStandard.SQLBuilder.SelectCommand`2"/> instance using the specified <see cref="T:JunX.NETStandard.MySQL.DBConnect"/> context and a single parameter.
            </summary>
            <typeparam name="T">The primary enum type representing the main table schema.</typeparam>
            <typeparam name="J">The secondary enum type representing a joined or related table schema.</typeparam>
            <param name="SelectCMD">The <see cref="T:JunX.NETStandard.SQLBuilder.SelectCommand`2"/> instance containing the SQL query to execute.</param>
            <param name="DBC">The <see cref="T:JunX.NETStandard.MySQL.DBConnect"/> instance responsible for executing the query.</param>
            <param name="Parameter">The parameter metadata containing the name and value to bind to the query.</param>
            <exception cref="T:System.Exception">
            Thrown when the delegated execution fails or the reader encounters an error during processing.
            </exception>
        </member>
        <member name="M:JunX.NETStandard.MySQL.BuilderExtensions.ExecuteReader``2(JunX.NETStandard.SQLBuilder.SelectCommand{``0,``1},JunX.NETStandard.MySQL.DBConnect,System.Collections.Generic.IEnumerable{JunX.NETStandard.MySQL.ParametersMetadata})">
            <summary>
            Executes the composed SQL <c>SELECT</c> statement represented by the <see cref="T:JunX.NETStandard.SQLBuilder.SelectCommand`2"/> instance using the specified <see cref="T:JunX.NETStandard.MySQL.DBConnect"/> context and a collection of parameters.
            </summary>
            <typeparam name="T">The primary enum type representing the main table schema.</typeparam>
            <typeparam name="J">The secondary enum type representing a joined or related table schema.</typeparam>
            <param name="SelectCMD">The <see cref="T:JunX.NETStandard.SQLBuilder.SelectCommand`2"/> instance containing the SQL query to execute.</param>
            <param name="DBC">The <see cref="T:JunX.NETStandard.MySQL.DBConnect"/> instance responsible for executing the query.</param>
            <param name="Parameters">A collection of parameter metadata objects, each specifying a name and value to bind to the query.</param>
            <exception cref="T:System.Exception">
            Thrown when the delegated execution fails or the reader encounters an error during processing.
            </exception>
        </member>
        <member name="M:JunX.NETStandard.MySQL.BuilderExtensions.ExecuteReader(JunX.NETStandard.SQLBuilder.SelectCommand,JunX.NETStandard.MySQL.DBConnect)">
            <summary>
            Executes the composed SQL <c>SELECT</c> statement represented by the <see cref="T:JunX.NETStandard.SQLBuilder.SelectCommand"/> instance using the specified <see cref="T:JunX.NETStandard.MySQL.DBConnect"/> context.
            </summary>
            <param name="SelectCMD">The <see cref="T:JunX.NETStandard.SQLBuilder.SelectCommand"/> instance containing the SQL query to execute.</param>
            <param name="DBC">The <see cref="T:JunX.NETStandard.MySQL.DBConnect"/> instance responsible for executing the query.</param>
            <exception cref="T:System.Exception">
            Thrown when the delegated execution fails or the reader encounters an error during processing.
            </exception>
        </member>
        <member name="M:JunX.NETStandard.MySQL.BuilderExtensions.ExecuteReader(JunX.NETStandard.SQLBuilder.SelectCommand,JunX.NETStandard.MySQL.DBConnect,JunX.NETStandard.MySQL.ParametersMetadata)">
            <summary>
            Executes the composed SQL <c>SELECT</c> statement represented by the <see cref="T:JunX.NETStandard.SQLBuilder.SelectCommand"/> instance using the specified <see cref="T:JunX.NETStandard.MySQL.DBConnect"/> context and a single parameter.
            </summary>
            <param name="SelectCMD">The <see cref="T:JunX.NETStandard.SQLBuilder.SelectCommand"/> instance containing the SQL query to execute.</param>
            <param name="DBC">The <see cref="T:JunX.NETStandard.MySQL.DBConnect"/> instance responsible for executing the query.</param>
            <param name="Parameter">The parameter metadata containing the name and value to bind to the query.</param>
            <exception cref="T:System.Exception">
            Thrown when the delegated execution fails or the reader encounters an error during processing.
            </exception>
        </member>
        <member name="M:JunX.NETStandard.MySQL.BuilderExtensions.ExecuteReader(JunX.NETStandard.SQLBuilder.SelectCommand,JunX.NETStandard.MySQL.DBConnect,System.Collections.Generic.IEnumerable{JunX.NETStandard.MySQL.ParametersMetadata})">
            <summary>
            Executes the composed SQL <c>SELECT</c> statement represented by the <see cref="T:JunX.NETStandard.SQLBuilder.SelectCommand"/> instance using the specified <see cref="T:JunX.NETStandard.MySQL.DBConnect"/> context and a collection of parameters.
            </summary>
            <param name="SelectCMD">The <see cref="T:JunX.NETStandard.SQLBuilder.SelectCommand"/> instance containing the SQL query to execute.</param>
            <param name="DBC">The <see cref="T:JunX.NETStandard.MySQL.DBConnect"/> instance responsible for executing the query.</param>
            <param name="Parameters">A collection of parameter metadata objects, each specifying a name and value to bind to the query.</param>
            <exception cref="T:System.Exception">
            Thrown when the delegated execution fails or the reader encounters an error during processing.
            </exception>
        </member>
        <member name="T:JunX.NETStandard.MySQL.DBConnect">
            <summary>
            Contains methods and properties that provides additional functionalities for an easier and more intuitive MySQL Database manipulation and querying.
            </summary>
        </member>
        <member name="T:JunX.NETStandard.MySQL.DBConnect.ConfigGenerator">
            <summary>
            Provides static methods for generating, retrieving, and validating a custom MySQL connection string configuration file.
            </summary>
            <remarks>
            This class creates and manages a standalone <c>DBConnect.config</c> file located in the application's base directory.
            The configuration file contains a <c>configuration</c> root element with a nested <c>ConnectionString</c> section,
            which includes an <c>Add</c> element storing the connection string, provider name, and identifier.
            All operations are performed statically and assume a single named connection entry.
            </remarks>
        </member>
        <member name="M:JunX.NETStandard.MySQL.DBConnect.ConfigGenerator.GenerateDBConfig(System.String)">
            <summary>
            Generates a new configuration file containing a MySQL connection string entry.
            </summary>
            <param name="ConnectionString">
            The connection string to be embedded in the configuration file. Must be non-empty and properly formatted.
            </param>
            <exception cref="T:System.Exception">
            Thrown when the provided connection string is null, empty, or consists only of whitespace.
            </exception>
            <remarks>
            This method creates a <c>DBConnect.config</c> file in the application's base directory.
            The file structure includes a root <c>configuration</c> element with a nested <c>ConnectionString</c> section.
            Within that section, an <c>Add</c> element is written with attributes for <c>name</c>, <c>connectionString</c>, and <c>providerName</c>.
            The file is overwritten if it already exists.
            </remarks>
        </member>
        <member name="M:JunX.NETStandard.MySQL.DBConnect.ConfigGenerator.GetConnectionString">
            <summary>
            Retrieves the MySQL connection string from the custom <c>DBConnect.config</c> file.
            </summary>
            <returns>
            The connection string value associated with the predefined name, or <c>null</c> if not found.
            </returns>
            <exception cref="T:System.Exception">
            Thrown when the configuration file <c>DBConnect.config</c> is missing from the application's base directory.
            </exception>
            <remarks>
            This method loads the XML configuration file and searches for an <c>Add</c> element under the <c>ConnectionString</c> section.
            It returns the value of the <c>connectionString</c> attribute if the <c>name</c> attribute matches the predefined constant.
            The XML structure is expected to be case-sensitive and well-formed.
            </remarks>
        </member>
        <member name="M:JunX.NETStandard.MySQL.DBConnect.ConfigGenerator.ConfigExists">
            <summary>
            Checks whether the <c>DBConnect.config</c> file exists in the application's base directory.
            </summary>
            <returns>
            <c>true</c> if the configuration file is present; otherwise, <c>false</c>.
            </returns>
            <remarks>
            This method performs a simple file existence check using <see cref="M:System.IO.File.Exists(System.String)"/>.
            It does not validate the file's contents or structure.
            </remarks>
        </member>
        <member name="M:JunX.NETStandard.MySQL.DBConnect.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:JunX.NETStandard.MySQL.DBConnect"/> class and sets the connection string for internal database operations.
            </summary>
            <param name="ConnString">
            The connection string used to configure the internal MySQL connection.
            </param>
            <remarks>
            This constructor resets all internal database-related variables and assigns the provided connection string for subsequent use.
            </remarks>
        </member>
        <member name="M:JunX.NETStandard.MySQL.DBConnect.#ctor(MySql.Data.MySqlClient.MySqlConnection)">
            <summary>
            Initializes a new instance of the <see cref="T:JunX.NETStandard.MySQL.DBConnect"/> class using the specified <see cref="T:MySql.Data.MySqlClient.MySqlConnection"/>.
            </summary>
            <param name="Connection">
            An existing <see cref="T:MySql.Data.MySqlClient.MySqlConnection"/> instance to be used for command execution and data operations.
            </param>
            <remarks>
            This constructor initializes all internal variables, assigns the provided connection,
            and configures the internal <see cref="T:MySql.Data.MySqlClient.MySqlCommand"/> to use text-based SQL commands.
            </remarks>
        </member>
        <member name="M:JunX.NETStandard.MySQL.DBConnect.#ctor(JunX.NETStandard.MySQL.ConnectionStringMetadata)">
            <summary>
            Initializes a new instance of the <see cref="T:JunX.NETStandard.MySQL.DBConnect"/> class using the specified connection metadata.
            Internal variables are initialized and populated with connection details.
            </summary>
            <param name="ConnectionStringInfo">The metadata used to construct and store the MySQL connection string.</param>
        </member>
        <member name="M:JunX.NETStandard.MySQL.DBConnect.ExecuteReader">
            <summary>
            Executes the current SQL <c>SELECT</c> command and stores the result set values in the internal collection.
            </summary>
            <exception cref="T:System.Exception">
            Thrown when the command execution fails due to connection issues, invalid SQL syntax, or runtime errors.
            </exception>
            <remarks>
            This method performs the following steps:
            <list type="bullet">
            <item><description>Validates the connection and command text using <see cref="M:JunX.NETStandard.MySQL.DBConnect.ValidateForExecution"/>.</description></item>
            <item><description>Assigns the current <see cref="P:JunX.NETStandard.MySQL.DBConnect.CommandText"/> to the internal <see cref="T:MySql.Data.MySqlClient.MySqlCommand"/> and clears existing parameters.</description></item>
            <item><description>Executes the command using <c>ExecuteReader()</c> and stores the result in <c>InternalVariables.Reader</c>.</description></item>
            <item><description>If rows are returned, iterates through each field of each row and adds the stringified values to <c>InternalVariables.Values</c>.</description></item>
            </list>
            Intended for use with SQL <c>SELECT</c> queries that return tabular data.
            </remarks>
        </member>
        <member name="M:JunX.NETStandard.MySQL.DBConnect.ExecuteReader(JunX.NETStandard.MySQL.ParametersMetadata)">
            <summary>
            Executes the current SQL <c>SELECT</c> command with a single parameter and stores the result set values in the internal collection.
            </summary>
            <param name="Parameter">
            A <see cref="T:JunX.NETStandard.MySQL.ParametersMetadata"/> instance containing the name and value of the SQL parameter to bind.
            </param>
            <exception cref="T:System.Exception">
            Thrown when the command execution fails due to connection issues, invalid SQL syntax, or parameter binding errors.
            </exception>
            <remarks>
            This method performs the following steps:
            <list type="bullet">
            <item><description>Validates the connection and command text using <see cref="M:JunX.NETStandard.MySQL.DBConnect.ValidateForExecution"/>.</description></item>
            <item><description>Assigns the current <see cref="P:JunX.NETStandard.MySQL.DBConnect.CommandText"/> to the internal <see cref="T:MySql.Data.MySqlClient.MySqlCommand"/> and clears existing parameters.</description></item>
            <item><description>Binds the provided parameter using <c>AddWithValue</c> and executes the command using <c>ExecuteReader()</c>.</description></item>
            <item><description>If rows are returned, iterates through each field of each row and adds the stringified values to <c>InternalVariables.Values</c>.</description></item>
            </list>
            Intended for use with parameterized <c>SELECT</c> queries that return tabular data.
            </remarks>
        </member>
        <member name="M:JunX.NETStandard.MySQL.DBConnect.ExecuteReader(System.Collections.Generic.IEnumerable{JunX.NETStandard.MySQL.ParametersMetadata})">
            <summary>
            Executes the current SQL <c>SELECT</c> command with multiple parameters and stores the result set values in the internal collection.
            </summary>
            <param name="Parameters">
            A collection of <see cref="T:JunX.NETStandard.MySQL.ParametersMetadata"/> instances representing the parameter names and values to bind to the SQL command.
            </param>
            <exception cref="T:System.Exception">
            Thrown when the command execution fails due to connection issues, invalid SQL syntax, or parameter binding errors.
            </exception>
            <remarks>
            This method performs the following steps:
            <list type="bullet">
            <item><description>Validates the connection and command text using <see cref="M:JunX.NETStandard.MySQL.DBConnect.ValidateForExecution"/>.</description></item>
            <item><description>Assigns the current <see cref="P:JunX.NETStandard.MySQL.DBConnect.CommandText"/> to the internal <see cref="T:MySql.Data.MySqlClient.MySqlCommand"/> and clears existing parameters.</description></item>
            <item><description>Binds each provided parameter using <c>AddWithValue</c> and executes the command using <c>ExecuteReader()</c>.</description></item>
            <item><description>If rows are returned, iterates through each field of each row and adds the stringified values to <c>InternalVariables.Values</c>.</description></item>
            </list>
            Intended for use with parameterized <c>SELECT</c> queries that return tabular data.
            </remarks>
        </member>
        <member name="M:JunX.NETStandard.MySQL.DBConnect.ExecuteAdapter">
            <summary>
            Initializes the internal <see cref="T:MySql.Data.MySqlClient.MySqlDataAdapter"/> with a <c>SELECT</c> command for data operations.
            </summary>
            <exception cref="T:System.Exception">
            Thrown if validation fails due to an unopened connection or missing/invalid command text.
            </exception>
            <remarks>
            This method validates the connection and command text using <see cref="M:JunX.NETStandard.MySQL.DBConnect.ValidateForExecution"/>.
            It then creates a new <see cref="T:MySql.Data.MySqlClient.MySqlDataAdapter"/> and assigns a <see cref="T:MySql.Data.MySqlClient.MySqlCommand"/> configured with the current <see cref="P:JunX.NETStandard.MySQL.DBConnect.CommandText"/> and <see cref="P:JunX.NETStandard.MySQL.DBConnect.Connection"/>.
            Intended for use with disconnected data access scenarios, such as filling a <see cref="P:JunX.NETStandard.MySQL.DBConnect.DataSet"/> or performing updates.
            </remarks>
        </member>
        <member name="M:JunX.NETStandard.MySQL.DBConnect.ExecuteAdapter(JunX.NETStandard.MySQL.ParametersMetadata)">
            <summary>
            Initializes the internal <see cref="T:MySql.Data.MySqlClient.MySqlDataAdapter"/> with a parameterized <c>SELECT</c> command for data operations.
            </summary>
            <param name="Parameter">
            A <see cref="T:JunX.NETStandard.MySQL.ParametersMetadata"/> instance containing the name and value of the SQL parameter to bind.
            </param>
            <exception cref="T:System.Exception">
            Thrown if validation fails due to an unopened connection or missing/invalid command text.
            </exception>
            <remarks>
            This method validates the connection and command text using <see cref="M:JunX.NETStandard.MySQL.DBConnect.ValidateForExecution"/>.
            It assigns the current <see cref="P:JunX.NETStandard.MySQL.DBConnect.CommandText"/> to the internal <see cref="T:MySql.Data.MySqlClient.MySqlCommand"/>,
            clears any existing parameters, binds the provided parameter using <c>AddWithValue</c>,
            and assigns the command to the <c>SelectCommand</c> of the internal <see cref="T:MySql.Data.MySqlClient.MySqlDataAdapter"/>.
            Intended for use with disconnected data access scenarios involving parameterized queries.
            </remarks>
        </member>
        <member name="M:JunX.NETStandard.MySQL.DBConnect.ExecuteAdapter(System.Collections.Generic.IEnumerable{JunX.NETStandard.MySQL.ParametersMetadata})">
            <summary>
            Initializes the internal <see cref="T:MySql.Data.MySqlClient.MySqlDataAdapter"/> with a parameterized <c>SELECT</c> command for data operations.
            </summary>
            <param name="Parameters">
            A collection of <see cref="T:JunX.NETStandard.MySQL.ParametersMetadata"/> instances representing the parameter names and values to bind to the SQL command.
            </param>
            <exception cref="T:System.Exception">
            Thrown if validation fails due to an unopened connection or missing/invalid command text.
            </exception>
            <remarks>
            This method validates the connection and command text using <see cref="M:JunX.NETStandard.MySQL.DBConnect.ValidateForExecution"/>.
            It assigns the current <see cref="P:JunX.NETStandard.MySQL.DBConnect.CommandText"/> to the internal <see cref="T:MySql.Data.MySqlClient.MySqlCommand"/>,
            clears any existing parameters, binds each provided parameter using <c>AddWithValue</c>,
            and assigns the command to the <c>SelectCommand</c> of the internal <see cref="T:MySql.Data.MySqlClient.MySqlDataAdapter"/>.
            Intended for use with disconnected data access scenarios involving parameterized queries and batch operations.
            </remarks>
        </member>
        <member name="M:JunX.NETStandard.MySQL.DBConnect.ExecuteDataSet">
            <summary>
            Executes the current SQL <c>SELECT</c> command and fills the internal <see cref="P:JunX.NETStandard.MySQL.DBConnect.DataSet"/> with the result set.
            </summary>
            <exception cref="T:System.Exception">
            Thrown if adapter initialization or data fill operation fails due to connection issues or invalid command configuration.
            </exception>
            <remarks>
            This method initializes a new <see cref="P:JunX.NETStandard.MySQL.DBConnect.DataSet"/>, invokes <see cref="M:JunX.NETStandard.MySQL.DBConnect.ExecuteAdapter"/> to configure the internal <see cref="T:MySql.Data.MySqlClient.MySqlDataAdapter"/>,
            and fills the dataset with the result of the executed query.
            Intended for disconnected data access scenarios such as UI binding, reporting, or in-memory data manipulation.
            </remarks>
        </member>
        <member name="M:JunX.NETStandard.MySQL.DBConnect.ExecuteDataSet(JunX.NETStandard.MySQL.ParametersMetadata)">
            <summary>
            Executes a parameterized SQL <c>SELECT</c> command and fills the internal <see cref="P:JunX.NETStandard.MySQL.DBConnect.DataSet"/> with the result set.
            </summary>
            <param name="Parameter">
            A <see cref="T:JunX.NETStandard.MySQL.ParametersMetadata"/> instance containing the name and value of the SQL parameter to bind.
            </param>
            <exception cref="T:System.Exception">
            Thrown if adapter initialization or data fill operation fails due to connection issues or invalid command configuration.
            </exception>
            <remarks>
            This method initializes a new <see cref="P:JunX.NETStandard.MySQL.DBConnect.DataSet"/>, invokes <see cref="M:JunX.NETStandard.MySQL.DBConnect.ExecuteAdapter(JunX.NETStandard.MySQL.ParametersMetadata)"/> to configure the internal <see cref="T:MySql.Data.MySqlClient.MySqlDataAdapter"/> with the provided parameter,
            and fills the dataset with the result of the executed query.
            Intended for disconnected data access scenarios involving parameterized queries, such as UI binding or in-memory data manipulation.
            </remarks>
        </member>
        <member name="M:JunX.NETStandard.MySQL.DBConnect.ExecuteDataSet(System.Collections.Generic.IEnumerable{JunX.NETStandard.MySQL.ParametersMetadata})">
            <summary>
            Executes a parameterized SQL <c>SELECT</c> command and fills the internal <see cref="P:JunX.NETStandard.MySQL.DBConnect.DataSet"/> with the result set.
            </summary>
            <param name="Parameters">
            A collection of <see cref="T:JunX.NETStandard.MySQL.ParametersMetadata"/> instances representing the parameter names and values to bind to the SQL command.
            </param>
            <exception cref="T:System.Exception">
            Thrown if adapter initialization or data fill operation fails due to connection issues or invalid command configuration.
            </exception>
            <remarks>
            This method initializes a new <see cref="P:JunX.NETStandard.MySQL.DBConnect.DataSet"/>, invokes <see cref="M:JunX.NETStandard.MySQL.DBConnect.ExecuteAdapter(System.Collections.Generic.IEnumerable{JunX.NETStandard.MySQL.ParametersMetadata})"/> to configure the internal <see cref="T:MySql.Data.MySqlClient.MySqlDataAdapter"/> with the provided parameters,
            and fills the dataset with the result of the executed query.
            Intended for disconnected data access scenarios involving parameterized queries, batch operations, or UI-bound data workflows.
            </remarks>
        </member>
        <member name="M:JunX.NETStandard.MySQL.DBConnect.ExecuteNonQuery">
            <summary>
            Executes the current SQL command that does not return a result set, such as <c>INSERT</c>, <c>UPDATE</c>, or <c>DELETE</c>.
            </summary>
            <exception cref="T:System.Exception">
            Thrown when the command execution fails due to connection issues, invalid SQL syntax, or runtime errors.
            </exception>
            <remarks>
            This method assigns the current <see cref="P:JunX.NETStandard.MySQL.DBConnect.CommandText"/> to the internal <see cref="T:MySql.Data.MySqlClient.MySqlCommand"/>,
            clears any existing parameters, and executes the command using <c>ExecuteNonQuery()</c>.
            Intended for use with SQL statements that modify data but do not return rows.
            </remarks>
        </member>
        <member name="M:JunX.NETStandard.MySQL.DBConnect.ExecuteNonQuery(JunX.NETStandard.MySQL.ParametersMetadata)">
            <summary>
            Executes a parameterized SQL command that does not return a result set, such as <c>INSERT</c>, <c>UPDATE</c>, or <c>DELETE</c>.
            </summary>
            <param name="Parameter">
            A <see cref="T:JunX.NETStandard.MySQL.ParametersMetadata"/> instance containing the name and value of the SQL parameter to bind.
            </param>
            <exception cref="T:System.Exception">
            Thrown when the command execution fails due to connection issues, invalid SQL syntax, or parameter binding errors.
            </exception>
            <remarks>
            This method assigns the current <see cref="P:JunX.NETStandard.MySQL.DBConnect.CommandText"/> to the internal <see cref="T:MySql.Data.MySqlClient.MySqlCommand"/>,
            clears any existing parameters, binds the provided parameter using <c>AddWithValue</c>,
            and executes the command using <c>ExecuteNonQuery()</c>.
            Intended for use with single-parameter SQL statements that modify data without returning rows.
            </remarks>
        </member>
        <member name="M:JunX.NETStandard.MySQL.DBConnect.ExecuteNonQuery(System.Collections.Generic.IEnumerable{JunX.NETStandard.MySQL.ParametersMetadata})">
            <summary>
            Executes a parameterized SQL command that does not return a result set, such as <c>INSERT</c>, <c>UPDATE</c>, or <c>DELETE</c>.
            </summary>
            <param name="Parameters">
            A collection of <see cref="T:JunX.NETStandard.MySQL.ParametersMetadata"/> instances representing the parameter names and values to bind to the SQL command.
            </param>
            <exception cref="T:System.Exception">
            Thrown when the command execution fails due to connection issues, invalid SQL syntax, or parameter binding errors.
            </exception>
            <remarks>
            This method assigns the current <see cref="P:JunX.NETStandard.MySQL.DBConnect.CommandText"/> to the internal <see cref="T:MySql.Data.MySqlClient.MySqlCommand"/>,
            clears any existing parameters, binds each provided parameter using <c>AddWithValue</c>,
            and executes the command using <c>ExecuteNonQuery()</c>.
            Intended for use with multi-parameter SQL statements that modify data without returning rows.
            </remarks>
        </member>
        <member name="M:JunX.NETStandard.MySQL.DBConnect.Open(System.Boolean@)">
            <summary>
            Opens the internal MySQL connection and configures the command object for text-based execution.
            </summary>
            <exception cref="T:System.Exception">
            Thrown when the connection attempt fails due to an invalid connection string or database access error.
            </exception>
            <remarks>
            This method checks whether the internal <see cref="T:MySql.Data.MySqlClient.MySqlConnection"/> is already open.
            If not, it assigns the connection string, opens the connection, and sets up the <see cref="T:MySql.Data.MySqlClient.MySqlCommand"/> with the active connection and <c>CommandType.Text</c>.
            This ensures that the command object is ready for executing SQL statements immediately after the connection is established.
            </remarks>
        </member>
        <member name="M:JunX.NETStandard.MySQL.DBConnect.CloseConnection">
            <summary>
            Closes the internal MySQL connection if it is currently open.
            </summary>
            <remarks>
            This method invokes <see cref="M:MySql.Data.MySqlClient.MySqlConnection.Close"/> on the internally managed connection object.
            It is recommended to call this after completing database operations to release resources and avoid connection leaks.
            </remarks>
        </member>
        <member name="M:JunX.NETStandard.MySQL.DBConnect.CloseReader">
            <summary>
            Closes the internal <see cref="T:MySql.Data.MySqlClient.MySqlDataReader"/> if it is currently open.
            </summary>
            <remarks>
            This method checks the <see cref="P:MySql.Data.MySqlClient.MySqlDataReader.IsClosed"/> property and closes the reader only if it is still active.
            Useful for releasing data stream resources after query execution to prevent locking or memory leaks.
            </remarks>
        </member>
        <member name="M:JunX.NETStandard.MySQL.DBConnect.DisposeAsync">
            <summary>
            Asynchronously disposes internal database-related resources and resets associated metadata.
            </summary>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous disposal operation.
            </returns>
            <remarks>
            This method performs a thorough cleanup of internal objects used during database operations:
            <list type="bullet">
            <item><description>Disposes <see cref="T:MySql.Data.MySqlClient.MySqlCommand"/>, <see cref="T:MySql.Data.MySqlClient.MySqlDataAdapter"/>, and <see cref="P:JunX.NETStandard.MySQL.DBConnect.DataSet"/> instances.</description></item>
            <item><description>Closes and disposes the <see cref="T:MySql.Data.MySqlClient.MySqlConnection"/> if it is still open.</description></item>
            <item><description>Asynchronously disposes the <see cref="T:MySql.Data.MySqlClient.MySqlDataReader"/> if it is active.</description></item>
            <item><description>Resets internal metadata fields such as connection string, command text, and value list to <c>null</c>.</description></item>
            </list>
            Recommended for use in asynchronous workflows to ensure proper resource release and prevent memory or connection leaks.
            </remarks>
        </member>
        <member name="M:JunX.NETStandard.MySQL.DBConnect.ResetConnection">
            <summary>
            Resets the internal MySQL connection by closing it if open and reopening it.
            </summary>
            <remarks>
            This method ensures the connection is in a clean state by explicitly closing it if necessary,
            then invoking <see cref="M:JunX.NETStandard.MySQL.DBConnect.Open(System.Boolean@)"/> to reinitialize the connection using the current connection string.
            Useful for recovering from transient connection issues or refreshing stale connections.
            </remarks>
        </member>
        <member name="M:JunX.NETStandard.MySQL.DBConnect.ValidateForExecution">
            <summary>
            Validates the internal connection and command text before executing a SQL <c>SELECT</c> operation.
            </summary>
            <exception cref="T:System.Exception">
            Thrown when the connection is not open, the command text is missing, or the command is not a <c>SELECT</c> statement.
            </exception>
            <remarks>
            This method performs three validation checks:
            <list type="bullet">
            <item><description>Ensures the internal <see cref="T:MySql.Data.MySqlClient.MySqlConnection"/> is open.</description></item>
            <item><description>Verifies that <see cref="P:JunX.NETStandard.MySQL.DBConnect.CommandText"/> is not null, empty, or whitespace.</description></item>
            <item><description>Confirms that the command text contains a valid SQL <c>SELECT</c> keyword.</description></item>
            </list>
            Intended to safeguard query execution logic by enforcing preconditions.
            </remarks>
        </member>
        <member name="M:JunX.NETStandard.MySQL.DBConnect.IsSQLSelect">
            <summary>
            Determines whether the current SQL command text represents a <c>SELECT</c> statement.
            </summary>
            <returns>
            <c>true</c> if the command text contains the keyword <c>SELECT</c>; otherwise, <c>false</c>.
            </returns>
            <remarks>
            This method performs a case-insensitive search for the keyword <c>SELECT</c> within the <see cref="P:JunX.NETStandard.MySQL.DBConnect.CommandText"/> property.
            Useful for distinguishing query operations from non-query commands such as <c>INSERT</c>, <c>UPDATE</c>, or <c>DELETE</c>.
            </remarks>
        </member>
        <member name="P:JunX.NETStandard.MySQL.DBConnect.Connection">
            <summary>
            Gets the internal <see cref="T:MySql.Data.MySqlClient.MySqlConnection"/> instance used for database operations.
            </summary>
            <value>
            The current <see cref="T:MySql.Data.MySqlClient.MySqlConnection"/> object managed by the <c>InternalVariables</c> container.
            </value>
            <remarks>
            This property exposes the underlying connection object for advanced scenarios such as transaction management or manual command execution.
            </remarks>
        </member>
        <member name="P:JunX.NETStandard.MySQL.DBConnect.State">
            <summary>
            Gets the current state of the internal <see cref="T:MySql.Data.MySqlClient.MySqlConnection"/> object.
            </summary>
            <value>
            A <see cref="T:System.Data.ConnectionState"/> value indicating whether the connection is open, closed, connecting, executing, or broken.
            </value>
            <remarks>
            This property reflects the runtime status of the internal connection and is useful for validating connection readiness before executing commands.
            </remarks>
        </member>
        <member name="P:JunX.NETStandard.MySQL.DBConnect.Reader">
            <summary>
            Gets the internal <see cref="T:MySql.Data.MySqlClient.MySqlDataReader"/> containing the result set from the most recent <c>SELECT</c> execution.
            </summary>
            <value>
            A <see cref="T:MySql.Data.MySqlClient.MySqlDataReader"/> instance used to read rows returned by the executed SQL query.
            </value>
            <remarks>
            This property provides direct access to the raw data reader stored in <c>InternalVariables.Reader</c>.
            It is typically used for manual row and field traversal after invoking <c>ExecuteReader()</c>.
            </remarks>
        </member>
        <member name="P:JunX.NETStandard.MySQL.DBConnect.Adapter">
            <summary>
            Gets the internal <see cref="T:MySql.Data.MySqlClient.MySqlDataAdapter"/> used for data operations such as filling datasets or updating tables.
            </summary>
            <value>
            A <see cref="T:MySql.Data.MySqlClient.MySqlDataAdapter"/> instance configured for use with the current database connection and command context.
            </value>
            <remarks>
            This property provides access to the adapter stored in <c>InternalVariables.Adapter</c>.
            It is typically used for disconnected data access scenarios, including populating <see cref="P:JunX.NETStandard.MySQL.DBConnect.DataSet"/> or synchronizing changes with the database.
            </remarks>
        </member>
        <member name="P:JunX.NETStandard.MySQL.DBConnect.DataSet">
            <summary>
            Gets the internal <see cref="P:JunX.NETStandard.MySQL.DBConnect.DataSet"/> used for storing tabular data retrieved from the database.
            </summary>
            <value>
            A <see cref="P:JunX.NETStandard.MySQL.DBConnect.DataSet"/> instance that holds one or more <see cref="T:System.Data.DataTable"/> objects populated via data adapters or manual assignment.
            </value>
            <remarks>
            This property provides access to <c>InternalVariables.Dataset</c>, typically used for disconnected data operations,
            such as binding to UI controls, performing in-memory queries, or exporting structured results.
            </remarks>
        </member>
        <member name="P:JunX.NETStandard.MySQL.DBConnect.HasRows">
            <summary>
            Gets a value indicating whether the current <see cref="T:MySql.Data.MySqlClient.MySqlDataReader"/> contains one or more rows.
            </summary>
            <value>
            <c>true</c> if the reader has at least one row; otherwise, <c>false</c>.
            </value>
            <remarks>
            This property reflects the <c>HasRows</c> state of <c>InternalVariables.Reader</c>.
            It is typically checked after executing a <c>SELECT</c> command to determine if any results were returned.
            </remarks>
        </member>
        <member name="P:JunX.NETStandard.MySQL.DBConnect.Values">
            <summary>
            Gets the internal list of stringified values retrieved from the most recent SQL <c>SELECT</c> execution.
            </summary>
            <value>
            A <see cref="T:System.Collections.Generic.List`1"/> containing the field values from all rows returned by the executed query.
            </value>
            <remarks>
            This property reflects the contents of <c>InternalVariables.Values</c>, which is populated during <c>ExecuteReader()</c>.
            Each entry corresponds to a field value, converted to string, from the result set.
            Useful for lightweight result inspection or quick value extraction without schema mapping.
            </remarks>
        </member>
        <member name="P:JunX.NETStandard.MySQL.DBConnect.ConnectionString">
            <summary>
            Gets or sets the internal MySQL connection string used for database operations.
            </summary>
            <value>
            A string representing the connection details required to establish a MySQL database connection.
            </value>
            <remarks>
            This property provides access to the underlying connection string stored in <see cref="T:JunX.NETStandard.MySQL.InternalVariables"/>.
            Updating this value affects how the internal connection is configured during initialization or opening.
            </remarks>
        </member>
        <member name="P:JunX.NETStandard.MySQL.DBConnect.CommandText">
            <summary>
            Gets or sets the SQL command text used for database operations.
            </summary>
            <value>
            A string containing the SQL query or command to be executed by the internal <see cref="T:MySql.Data.MySqlClient.MySqlCommand"/> object.
            </value>
            <remarks>
            This property provides access to the raw SQL statement stored in <c>InternalVariables.CommandText</c>.
            It is typically assigned before executing queries or commands against the database.
            </remarks>
        </member>
        <member name="P:JunX.NETStandard.MySQL.DBConnect.ConnectionStringInformation">
            <summary>
            Gets or sets the current connection string metadata used for MySQL access.
            </summary>
        </member>
        <member name="T:JunX.NETStandard.MySQL.SSLModes">
            <summary>
            Specifies the SSL mode used when connecting to a MySQL server.
            </summary>
        </member>
        <member name="F:JunX.NETStandard.MySQL.SSLModes.None">
            <summary>
            SSL is disabled; all connections are unencrypted.
            </summary>
        </member>
        <member name="F:JunX.NETStandard.MySQL.SSLModes.Preferred">
            <summary>
            SSL is used if available; falls back to unencrypted if not.
            </summary>
        </member>
        <member name="F:JunX.NETStandard.MySQL.SSLModes.Required">
            <summary>
            SSL is required; connection fails if SSL is unavailable.
            </summary>
        </member>
        <member name="F:JunX.NETStandard.MySQL.SSLModes.VerifyCA">
            <summary>
            SSL is required with server certificate validation against a trusted certificate authority.
            </summary>
        </member>
        <member name="F:JunX.NETStandard.MySQL.SSLModes.VerifyFull">
            <summary>
            SSL is required with full verification including server hostname identity.
            </summary>
        </member>
        <member name="T:JunX.NETStandard.MySQL.ConnectionStringMetadata">
            <summary>
            Represents metadata required to construct a MySQL connection string, including server credentials and SSL configuration.
            </summary>
        </member>
        <member name="P:JunX.NETStandard.MySQL.ConnectionStringMetadata.Server">
            <summary>
            Gets or sets the hostname or IP address of the MySQL server.
            </summary>
        </member>
        <member name="P:JunX.NETStandard.MySQL.ConnectionStringMetadata.Database">
            <summary>
            Gets or sets the name of the MySQL database to connect to.
            </summary>
        </member>
        <member name="P:JunX.NETStandard.MySQL.ConnectionStringMetadata.User">
            <summary>
            Gets or sets the username used to authenticate with the MySQL server.
            </summary>
        </member>
        <member name="P:JunX.NETStandard.MySQL.ConnectionStringMetadata.Password">
            <summary>
            Gets or sets the password used to authenticate with the MySQL server.
            </summary>
        </member>
        <member name="P:JunX.NETStandard.MySQL.ConnectionStringMetadata.SSLMode">
            <summary>
            Gets or sets the SSL mode used to secure the MySQL connection.
            </summary>
        </member>
        <member name="P:JunX.NETStandard.MySQL.ConnectionStringMetadata.ssl_ca">
            <summary>
            Gets or sets the file path to the Certificate Authority (CA) certificate used for SSL verification.
            </summary>
        </member>
        <member name="P:JunX.NETStandard.MySQL.ConnectionStringMetadata.ssl_cert">
            <summary>
            Gets or sets the file path to the client SSL certificate used for authentication with the MySQL server.
            </summary>
        </member>
        <member name="P:JunX.NETStandard.MySQL.ConnectionStringMetadata.ssl_key">
            <summary>
            Gets or sets the file path to the client SSL private key used for authentication with the MySQL server.
            </summary>
        </member>
        <member name="P:JunX.NETStandard.MySQL.ConnectionStringMetadata.ConnectionString">
            <summary>
            Gets the constructed MySQL connection string based on the provided server, credentials, and SSL configuration.
            </summary>
        </member>
        <member name="M:JunX.NETStandard.MySQL.ConnectionStringMetadata.#ctor(System.String,System.String,System.String,System.String,JunX.NETStandard.MySQL.SSLModes,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:JunX.NETStandard.MySQL.ConnectionStringMetadata"/> struct with server credentials and optional SSL configuration.
            </summary>
            <param name="SetServer">The hostname or IP address of the MySQL server.</param>
            <param name="SetDatabase">The name of the MySQL database to connect to.</param>
            <param name="SetUser">The username used to authenticate with the MySQL server.</param>
            <param name="SetPassword">The password used to authenticate with the MySQL server. Optional.</param>
            <param name="SetSSLMode">The SSL mode used to secure the MySQL connection.</param>
            <param name="Set_ssl_ca">The file path to the Certificate Authority (CA) certificate. Required for VERIFY_CA and VERIFY_FULL modes.</param>
            <param name="Set_ssl_cert">The file path to the client SSL certificate. Required for VERIFY_CA and VERIFY_FULL modes.</param>
            <param name="Set_ssl_key">The file path to the client SSL private key. Required for VERIFY_CA and VERIFY_FULL modes.</param>
        </member>
        <member name="M:JunX.NETStandard.MySQL.ConnectionStringMetadata.IsValid">
            <summary>
            Determines whether the connection metadata is complete and valid based on the selected SSL mode.
            </summary>
        </member>
        <member name="T:JunX.NETStandard.MySQL.EnumGenerator">
            <summary>
            Provides functionality to generate C# <c>enum</c> files from MySQL table and column metadata.
            </summary>
            <remarks>
            This class connects to a MySQL database using the provided connection string,
            retrieves table and column names from the specified <see cref="P:JunX.NETStandard.MySQL.EnumGenerator.DatabaseName"/>,
            and generates corresponding <c>.cs</c> files containing <c>enum</c> definitions for each table.
            Each enum includes the table name and its columns as members, with whitespace and hyphens replaced by underscores.
            Intended for use in code generation scenarios where database schema needs to be reflected in strongly typed constructs.
            </remarks>
        </member>
        <member name="M:JunX.NETStandard.MySQL.EnumGenerator.#ctor(System.String,System.Data.ConnectionState@)">
            <summary>
            Initializes a new instance of the <see cref="T:JunX.NETStandard.MySQL.EnumGenerator"/> class and attempts to open a connection to the specified MySQL server.
            </summary>
            <param name="ServerConnectionString">
            The connection string used to establish a connection to the MySQL server. This should include server, user ID, and password—but <b>must not</b> include the database name.
            </param>
            <param name="ConnectionState">
            An output parameter that reflects the final state of the connection after the attempt to open it.
            </param>
            <exception cref="T:System.Exception">
            Thrown when the connection attempt fails due to invalid credentials, unreachable server, or other connection-related issues.
            </exception>
            <remarks>
            This constructor creates a new <see cref="T:MySql.Data.MySqlClient.MySqlConnection"/> using the provided connection string and attempts to open it.
            If successful, <paramref name="ConnectionState"/> is set to <c>Open</c>; otherwise, it is set to <c>Closed</c> and an exception is thrown.
            <b>Note:</b> The <paramref name="ServerConnectionString"/> should not include the database name, as it is set separately via the <see cref="P:JunX.NETStandard.MySQL.EnumGenerator.DatabaseName"/> property.
            </remarks>
        </member>
        <member name="P:JunX.NETStandard.MySQL.EnumGenerator.DatabaseName">
            <summary>
            Gets or sets the name of the MySQL database to be used for table and column enumeration.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the target database name for metadata extraction.
            </value>
            <remarks>
            This property must be set before invoking any schema-related methods such as <c>GenerateEnumFiles</c>.
            The database name should not be included in the <c>ServerConnectionString</c> passed to the constructor.
            </remarks>
        </member>
        <member name="M:JunX.NETStandard.MySQL.EnumGenerator.GenerateEnumFiles(System.String)">
            <summary>
            Generates C# <c>enum</c> files for each table in the specified MySQL database and saves them to the target folder.
            </summary>
            <param name="Folder">
            The directory path where the generated <c>.cs</c> enum files will be saved. The folder will be created if it does not exist.
            </param>
            <remarks>
            This method performs the following steps:
            <list type="bullet">
            <item><description>Retrieves all table names from the database specified in <see cref="P:JunX.NETStandard.MySQL.EnumGenerator.DatabaseName"/>.</description></item>
            <item><description>For each table, retrieves its column names and generates a corresponding <c>enum</c> definition.</description></item>
            <item><description>Creates the output folder if necessary and writes each enum to a separate <c>.cs</c> file named after the table.</description></item>
            </list>
            Each enum includes the table name and its columns as members, with spaces and hyphens replaced by underscores.
            </remarks>
        </member>
        <member name="T:JunX.NETStandard.MySQL.InternalVariables">
            <summary>
            Provides a centralized container for shared MySQL-related objects and configuration values used across the application.
            </summary>
            <remarks>
            This static class holds reusable instances of connection, command, adapter, reader, dataset, and related metadata.
            Designed for internal use in tightly scoped database workflows where controlled initialization and reuse are required.
            </remarks>
        </member>
        <member name="M:JunX.NETStandard.MySQL.InternalVariables.InitializeAll">
            <summary>
            Initializes all internal MySQL-related objects and resets associated metadata to their default states.
            </summary>
            <remarks>
            This method creates new instances of <see cref="T:MySql.Data.MySqlClient.MySqlConnection"/>, <see cref="T:MySql.Data.MySqlClient.MySqlDataAdapter"/>, <see cref="T:MySql.Data.MySqlClient.MySqlCommand"/>, and <see cref="T:System.Data.DataSet"/>.
            It also clears the connection string, command text, and value list by assigning them to <c>null</c>.
            Intended for use in controlled startup or reset scenarios within internal database workflows.
            </remarks>
        </member>
        <member name="T:JunX.NETStandard.MySQL.ParametersMetadata">
            <summary>
            Represents metadata for a SQL parameter, including its name and associated value.
            </summary>
            <remarks>
            This structure is typically used to encapsulate parameter information for dynamic command construction or query execution.
            It supports both primitive and complex types via the <see cref="T:System.Object"/> value container.
            </remarks>
        </member>
        <member name="M:JunX.NETStandard.MySQL.ParametersMetadata.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:JunX.NETStandard.MySQL.ParametersMetadata"/> struct with the specified parameter name and value.
            </summary>
            <param name="SetParameterName">
            The name of the SQL parameter to be used in command execution.
            </param>
            <param name="SetValue">
            The value associated with the parameter, which can be of any object type.
            </param>
            <remarks>
            This constructor is typically used to encapsulate parameter metadata for dynamic SQL command construction or parameterized queries.
            </remarks>
        </member>
        <member name="T:JunX.NETStandard.SQLBuilder.DeleteCommand`1">
            <summary>
            Represents a fluent SQL <c>DELETE</c> statement builder targeting a table mapped from the enum type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">
            An enum type whose name corresponds to the target table for deletion.
            </typeparam>
            <remarks>
            This class provides a metadata-driven approach to constructing SQL <c>DELETE</c> statements, using the enum type <typeparamref name="T"/> to infer the table name.
            It supports fluent composition of conditional logic via <c>WHERE</c> clauses and grouped expressions.
            Designed for scenarios where compile-time enum mapping drives table targeting and clause safety.
            </remarks>
        </member>
        <member name="M:JunX.NETStandard.SQLBuilder.DeleteCommand`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:JunX.NETStandard.SQLBuilder.DeleteCommand`1"/> class for building a SQL <c>DELETE</c> statement targeting the specified entity type.
            </summary>
            <remarks>
            This constructor begins the command with <c>DELETE FROM</c> followed by the name of the type <typeparamref name="T"/>.
            It also resets the internal <c>WHERE</c> clause flag to ensure clean composition.
            Intended for metadata-driven deletion logic where <typeparamref name="T"/> maps to a table name.
            </remarks>
        </member>
        <member name="M:JunX.NETStandard.SQLBuilder.DeleteCommand`1.ToString">
            <summary>
            Returns the composed SQL <c>DELETE</c> statement as a string, terminated with a semicolon.
            </summary>
            <returns>
            A complete SQL query string representing the current state of the delete builder.
            </returns>
            <remarks>
            This override finalizes the command buffer for execution or inspection. It assumes that any necessary <c>WHERE</c> clauses have been appended.
            </remarks>
        </member>
        <member name="P:JunX.NETStandard.SQLBuilder.DeleteCommand`1.StartWhere">
            <summary>
            Begins composition of a SQL <c>WHERE</c> clause for a <c>DELETE</c> command involving a single primary table.
            </summary>
            <returns>A new <see cref="!:WhereClause&lt;DeleteCommand&lt;T&gt;, T&gt;"/> instance bound to this command.</returns>
        </member>
        <member name="T:JunX.NETStandard.SQLBuilder.DeleteCommand">
            <summary>
            Provides a fluent builder for composing SQL <c>DELETE</c> statements with optional conditional logic.
            </summary>
            <remarks>
            This class enables dynamic construction of SQL <c>DELETE</c> queries, including support for grouped and connected <c>WHERE</c> clauses.
            It tracks internal state to ensure proper clause sequencing and syntax.
            Designed for scenarios requiring flexible, string-based query generation without relying on strongly typed schema.
            </remarks>
        </member>
        <member name="M:JunX.NETStandard.SQLBuilder.DeleteCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:JunX.NETStandard.SQLBuilder.DeleteCommand"/> class for building a SQL <c>DELETE</c> statement.
            </summary>
            <remarks>
            This constructor sets up the internal command buffer and begins the statement with <c>DELETE FROM</c>.
            It also resets the internal flag used to track whether any <c>WHERE</c> clauses have been appended.
            </remarks>
        </member>
        <member name="M:JunX.NETStandard.SQLBuilder.DeleteCommand.ToString">
            <summary>
            Returns the composed SQL <c>DELETE</c> statement as a string, terminated with a semicolon.
            </summary>
            <returns>
            A complete SQL query string representing the current state of the delete builder.
            </returns>
            <remarks>
            This override finalizes the command buffer for execution or inspection. It assumes that any necessary <c>WHERE</c> clauses have been appended.
            </remarks>
        </member>
        <member name="P:JunX.NETStandard.SQLBuilder.DeleteCommand.StartWhere">
            <summary>
            Begins composition of a SQL <c>WHERE</c> clause for a <c>DELETE</c> command without generic table bindings.
            </summary>
            <returns>A new <see cref="T:JunX.NETStandard.SQLBuilder.WhereClause`1"/> instance bound to this command.</returns>
        </member>
        <member name="T:JunX.NETStandard.SQLBuilder.WhereConnectors">
            <summary>
            Specifies logical connectors used to combine conditions in SQL <c>WHERE</c> clauses.
            </summary>
        </member>
        <member name="T:JunX.NETStandard.SQLBuilder.JoinModes">
            <summary>
            Specifies SQL join strategies for combining rows from multiple tables based on related columns.
            </summary>
            <remarks>
            These modes define how records from the primary and secondary tables are matched and included in the result set.
            Commonly used in query builders to control join semantics.
            </remarks>
        </member>
        <member name="T:JunX.NETStandard.SQLBuilder.OrderByModes">
            <summary>
            Specifies the ordering mode to be used in generating MySQL <c>SELECT</c> commands.
            </summary>
        </member>
        <member name="F:JunX.NETStandard.SQLBuilder.OrderByModes.ASC">
            <summary>
            Sets the ordering mode to Ascending.
            </summary>
        </member>
        <member name="F:JunX.NETStandard.SQLBuilder.OrderByModes.DESC">
            <summary>
            Sets the ordering mode to Descending
            </summary>
        </member>
        <member name="T:JunX.NETStandard.SQLBuilder.DataTypes">
            <summary>
            Specifies the classification of a data value as either numeric or non-numeric.
            </summary>
            <remarks>
            This enum is typically used to distinguish between values that support arithmetic operations (e.g., integers, decimals)
            and those that represent textual or categorical data (e.g., strings, dates).
            Useful for schema validation, dynamic query generation, and type-aware formatting.
            </remarks>
        </member>
        <member name="T:JunX.NETStandard.SQLBuilder.SQLOperator">
            <summary>
            Defines symbolic SQL comparison operators for use in <c>WHERE</c> clauses and conditional expressions.
            </summary>
            <remarks>
            These operators represent common relational comparisons such as equality, inequality, and pattern matching.
            </remarks>
        </member>
        <member name="T:JunX.NETStandard.SQLBuilder.SqlOperatorExtensions">
            <summary>
            Provides extension methods for the <see cref="!:SqlOperator"/> enum, enabling symbolic SQL rendering.
            </summary>
            <remarks>
            These methods convert enum members into their corresponding SQL operator symbols for use in query generation.
            </remarks>
        </member>
        <member name="M:JunX.NETStandard.SQLBuilder.SqlOperatorExtensions.ToSymbol(JunX.NETStandard.SQLBuilder.SQLOperator)">
            <summary>
            Converts a <see cref="!:SqlOperator"/> enum value into its corresponding SQL symbol.
            </summary>
            <param name="op">
            The <see cref="!:SqlOperator"/> value to convert.
            </param>
            <returns>
            A string representing the SQL symbol, such as <c>=</c>, <c>!=</c>, <c>&gt;</c>, <c>&lt;</c>, or <c>LIKE</c>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the provided <paramref name="op"/> value is not defined in <see cref="T:JunX.NETStandard.SQLBuilder.SQLOperator"/>.
            </exception>
            <remarks>
            This method enables symbolic rendering of SQL operators for use in query builders and expression generators.
            </remarks>
        </member>
        <member name="T:JunX.NETStandard.SQLBuilder.InsertIntoCommand`1">
            <summary>
            Provides a fluent, strongly typed builder for composing SQL <c>INSERT INTO</c> statements using enum-defined column metadata.
            </summary>
            <typeparam name="T">
            An enum type representing the target table's column schema. Each enum member corresponds to a column name.
            </typeparam>
            <remarks>
            This class supports dynamic SQL generation for insert operations, including column selection and value formatting.
            It tracks internal state to manage parentheses, comma placement, and clause sequencing.
            Designed for scenarios where schema is represented via enums, enabling type-safe and metadata-driven query composition.
            </remarks>
        </member>
        <member name="M:JunX.NETStandard.SQLBuilder.InsertIntoCommand`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:JunX.NETStandard.SQLBuilder.InsertIntoCommand`1"/> class and begins an SQL <c>INSERT INTO</c> statement.
            </summary>
            <remarks>
            This constructor sets up the internal command buffer with the target table name inferred from the enum type <typeparamref name="T"/>.
            It also resets internal flags for column and value tracking, preparing the builder for structured insertion logic.
            </remarks>
        </member>
        <member name="M:JunX.NETStandard.SQLBuilder.InsertIntoCommand`1.ToString">
            <summary>
            Returns the composed SQL <c>INSERT INTO</c> statement as a string, terminated with a closing parenthesis and semicolon.
            </summary>
            <returns>
            A complete SQL query string representing the current state of the insertion builder.
            </returns>
            <remarks>
            This override finalizes the query for execution or inspection. It assumes that column and value sections have been properly appended.
            </remarks>
        </member>
        <member name="M:JunX.NETStandard.SQLBuilder.InsertIntoCommand`1.Column(`0)">
            <summary>
            Appends a column to the SQL <c>INSERT INTO</c> clause using an enum member representing the column name.
            </summary>
            <param name="Column">
            The enum member of type <typeparamref name="T"/> that identifies the column to insert into.
            </param>
            <returns>
            The current <see cref="T:JunX.NETStandard.SQLBuilder.InsertIntoCommand`1"/> instance, allowing fluent chaining of additional builder methods.
            </returns>
            <remarks>
            This method begins the column list with an opening parenthesis if it's the first column, and appends commas between subsequent columns.
            Use in combination with <c>Values(...)</c> to complete the insertion statement.
            </remarks>
        </member>
        <member name="M:JunX.NETStandard.SQLBuilder.InsertIntoCommand`1.Column(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Appends multiple columns to the SQL <c>INSERT INTO</c> clause using enum members representing column names.
            </summary>
            <param name="Columns">
            A sequence of enum members of type <typeparamref name="T"/> that identify the columns to insert into.
            </param>
            <returns>
            The current <see cref="T:JunX.NETStandard.SQLBuilder.InsertIntoCommand`1"/> instance, allowing fluent chaining of additional builder methods.
            </returns>
            <remarks>
            This method begins the column list with an opening parenthesis if it's the first column, and appends commas between subsequent columns.
            Use in combination with <c>Values(...)</c> to complete the insertion statement.
            </remarks>
        </member>
        <member name="M:JunX.NETStandard.SQLBuilder.InsertIntoCommand`1.Values(System.String,JunX.NETStandard.SQLBuilder.DataTypes)">
            <summary>
            Appends a single value to the SQL <c>VALUES</c> clause, formatted according to its declared <see cref="!:DataType"/>.
            </summary>
            <param name="Value">
            The raw string value to insert into the target column.
            </param>
            <param name="DataType">
            The classification of the value as either <see cref="F:JunX.NETStandard.SQLBuilder.DataTypes.Numeric"/> or <see cref="F:JunX.NETStandard.SQLBuilder.DataTypes.NonNumeric"/>, used for safe SQL formatting.
            </param>
            <returns>
            The current <see cref="T:JunX.NETStandard.SQLBuilder.InsertIntoCommand`1"/> instance, allowing fluent chaining of additional builder methods.
            </returns>
            <remarks>
            This method begins the <c>VALUES</c> clause if it hasn't already started, and appends the SQL-safe representation of the value.
            Use in combination with <c>Column(...)</c> to ensure column-value alignment.
            </remarks>
        </member>
        <member name="M:JunX.NETStandard.SQLBuilder.InsertIntoCommand`1.Values(System.Collections.Generic.IEnumerable{JunX.NETStandard.SQLBuilder.ValuesMetadata})">
            <summary>
            Appends multiple values to the SQL <c>VALUES</c> clause, each formatted according to its declared <see cref="T:JunX.NETStandard.SQLBuilder.DataTypes"/>.
            </summary>
            <param name="Values">
            A sequence of <see cref="T:JunX.NETStandard.SQLBuilder.ValuesMetadata"/> instances, each containing a raw value and its associated data type for SQL-safe formatting.
            </param>
            <returns>
            The current <see cref="T:JunX.NETStandard.SQLBuilder.InsertIntoCommand`1"/> instance, allowing fluent chaining of additional builder methods.
            </returns>
            <remarks>
            This method begins the <c>VALUES</c> clause if it hasn't already started, and appends each SQL-safe value with comma separation.
            Use in combination with <c>Column(...)</c> to ensure column-value alignment.
            </remarks>
        </member>
        <member name="T:JunX.NETStandard.SQLBuilder.InsertIntoCommand">
            <summary>
            Provides a fluent, loosely typed builder for composing SQL <c>INSERT INTO</c> statements using raw string identifiers.
            </summary>
            <remarks>
            This class supports dynamic SQL generation for insert operations, including table targeting, column selection, and value formatting.
            It tracks internal state to manage clause sequencing, parentheses, and comma placement.
            Designed for scenarios where schema is not enum-bound, enabling flexible and runtime-driven query composition.
            </remarks>
        </member>
        <member name="M:JunX.NETStandard.SQLBuilder.InsertIntoCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:JunX.NETStandard.SQLBuilder.InsertIntoCommand"/> class for building an SQL <c>INSERT INTO</c> statement.
            </summary>
            <remarks>
            This constructor sets up the internal command buffer and resets column/value tracking flags.
            The target table name must be specified separately before appending columns and values.
            </remarks>
        </member>
        <member name="M:JunX.NETStandard.SQLBuilder.InsertIntoCommand.ToString">
            <summary>
            Returns the composed SQL <c>INSERT INTO</c> statement as a string, terminated with a closing parenthesis and semicolon.
            </summary>
            <returns>
            A complete SQL query string representing the current state of the insertion builder.
            </returns>
            <remarks>
            This override finalizes the query for execution or inspection. It assumes that column and value sections have been properly appended.
            </remarks>
        </member>
        <member name="M:JunX.NETStandard.SQLBuilder.InsertIntoCommand.InsertInto(System.String)">
            <summary>
            Specifies the target table for the SQL <c>INSERT INTO</c> statement.
            </summary>
            <param name="Table">
            The name of the table into which data will be inserted.
            </param>
            <returns>
            The current <see cref="T:JunX.NETStandard.SQLBuilder.InsertIntoCommand"/> instance, allowing fluent chaining of additional builder methods.
            </returns>
            <remarks>
            This method appends the table name directly to the command buffer. It should be called before defining columns and values.
            </remarks>
        </member>
        <member name="M:JunX.NETStandard.SQLBuilder.InsertIntoCommand.Column(System.String)">
            <summary>
            Appends a column name to the SQL <c>INSERT INTO</c> clause.
            </summary>
            <param name="Column">
            The name of the column to insert into.
            </param>
            <returns>
            The current <see cref="T:JunX.NETStandard.SQLBuilder.InsertIntoCommand"/> instance, allowing fluent chaining of additional builder methods.
            </returns>
            <remarks>
            This method begins the column list with an opening parenthesis if it's the first column, and appends commas between subsequent columns.
            Use in combination with <c>Values(...)</c> to complete the insertion statement.
            </remarks>
        </member>
        <member name="M:JunX.NETStandard.SQLBuilder.InsertIntoCommand.Column(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Appends multiple column names to the SQL <c>INSERT INTO</c> clause.
            </summary>
            <param name="Columns">
            A sequence of column names to insert into.
            </param>
            <returns>
            The current <see cref="T:JunX.NETStandard.SQLBuilder.InsertIntoCommand"/> instance, allowing fluent chaining of additional builder methods.
            </returns>
            <remarks>
            This method begins the column list with an opening parenthesis if it's the first column, and appends commas between subsequent columns.
            Use in combination with <c>Values(...)</c> to complete the insertion statement.
            </remarks>
        </member>
        <member name="M:JunX.NETStandard.SQLBuilder.InsertIntoCommand.Values(System.String,JunX.NETStandard.SQLBuilder.DataTypes)">
            <summary>
            Appends a single SQL-safe value to the <c>VALUES</c> clause of the <c>INSERT INTO</c> statement.
            </summary>
            <param name="Value">
            The raw string value to insert.
            </param>
            <param name="DataType">
            The <see cref="!:MySQLDataType"/> representing the SQL type of the value (e.g., <c>VARCHAR</c>, <c>INT</c>, <c>DATE</c>).
            </param>
            <returns>
            The current <see cref="T:JunX.NETStandard.SQLBuilder.InsertIntoCommand"/> instance, allowing fluent chaining of additional builder methods.
            </returns>
            <remarks>
            This method begins the <c>VALUES</c> clause with a closing parenthesis from the column list, followed by <c>VALUES (</c>.
            Subsequent calls append comma-separated values. Each value is formatted safely using <c>Construct.SQLSafeValue</c>.
            </remarks>
        </member>
        <member name="M:JunX.NETStandard.SQLBuilder.InsertIntoCommand.Values(System.Collections.Generic.IEnumerable{JunX.NETStandard.SQLBuilder.ValuesMetadata})">
            <summary>
            Appends multiple SQL-safe values to the <c>VALUES</c> clause of the <c>INSERT INTO</c> statement using typed metadata.
            </summary>
            <param name="Values">
            A sequence of <see cref="T:JunX.NETStandard.SQLBuilder.ValuesMetadata"/> instances, each containing a raw value and its associated SQL data type.
            </param>
            <returns>
            The current <see cref="T:JunX.NETStandard.SQLBuilder.InsertIntoCommand"/> instance, allowing fluent chaining of additional builder methods.
            </returns>
            <remarks>
            This method begins the <c>VALUES</c> clause with a closing parenthesis from the column list, followed by <c>VALUES (</c>.
            Each value is appended with comma separation and formatted safely using the metadata's <c>Value</c> property.
            </remarks>
        </member>
        <member name="T:JunX.NETStandard.SQLBuilder.SelectCommand`2">
            <summary>
            Provides a fluent, strongly typed builder for composing SQL <c>SELECT</c> statements involving joined tables represented by enum types.
            </summary>
            <typeparam name="T">
            The enum type representing the primary table's column names.
            </typeparam>
            <typeparam name="J">
            The enum type representing the joined table's column names.
            </typeparam>
            <remarks>
            This class supports dynamic SQL generation with fluent chaining of clauses such as <c>SELECT</c>, <c>FROM</c>, <c>JOIN</c>, <c>WHERE</c>, <c>ORDER BY</c>, and aliasing.
            It tracks internal state to manage comma placement, condition grouping, and clause sequencing across multiple enum-based sources.
            Intended for scenarios where joined table metadata is modeled via enums, enabling type-safe query composition and SDK-level abstraction.
            </remarks>
        </member>
        <member name="M:JunX.NETStandard.SQLBuilder.SelectCommand`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:JunX.NETStandard.SQLBuilder.SelectCommand`2"/> class and begins composing an SQL <c>SELECT</c> statement.
            </summary>
            <remarks>
            This constructor sets up the internal SQL command builder with a starting <c>SELECT</c> clause,
            and resets internal flags used to track column and condition state during fluent query composition.
            </remarks>
        </member>
        <member name="M:JunX.NETStandard.SQLBuilder.SelectCommand`2.ToString">
            <summary>
            Returns the composed SQL <c>SELECT</c> statement as a complete string.
            </summary>
            <returns>
            A string representing the finalized SQL query, terminated with a semicolon.
            </returns>
            <remarks>
            This method completes the internal SQL builder output for inspection, logging, or execution.
            </remarks>
        </member>
        <member name="P:JunX.NETStandard.SQLBuilder.SelectCommand`2.From">
            <summary>
            Appends the <c>FROM</c> clause to the SQL <c>SELECT</c> statement using the enum type <typeparamref name="T"/> as the table name.
            </summary>
            <returns>
            The current <see cref="T:JunX.NETStandard.SQLBuilder.SelectCommand`2"/> instance, allowing fluent chaining of additional builder methods.
            </returns>
            <remarks>
            This property infers the table name from the type <typeparamref name="T"/> and appends it to the query.
            Intended for use in queries where <typeparamref name="T"/> represents the primary table in a join or standalone selection.
            </remarks>
        </member>
        <member name="P:JunX.NETStandard.SQLBuilder.SelectCommand`2.SelectAllPrimary">
            <summary>
            Appends a wildcard column selector for the primary table to the SQL <c>SELECT</c> clause.
            </summary>
            <returns>The current <see cref="T:JunX.NETStandard.SQLBuilder.SelectCommand`2"/> instance for fluent chaining.</returns>
        </member>
        <member name="P:JunX.NETStandard.SQLBuilder.SelectCommand`2.SelectAllJoined">
            <summary>
            Appends a wildcard column selector for the joined table to the SQL <c>SELECT</c> clause.
            </summary>
            <returns>The current <see cref="T:JunX.NETStandard.SQLBuilder.SelectCommand`2"/> instance for fluent chaining.</returns>
        </member>
        <member name="P:JunX.NETStandard.SQLBuilder.SelectCommand`2.Distinct">
            <summary>
            Appends a DISTINCT clause to the SQL command to ensure unique rows in the result set.
            </summary>
        </member>
        <member name="P:JunX.NETStandard.SQLBuilder.SelectCommand`2.StartWhere">
            <summary>
            Begins composition of a SQL <c>WHERE</c> clause for a <c>SELECT</c> command involving a primary and joined table.
            </summary>
            <returns>A new <see cref="!:WhereClause&lt;SelectCommand&lt;T, J&gt;, T, J&gt;"/> instance bound to this command.</returns>
        </member>
        <member name="M:JunX.NETStandard.SQLBuilder.SelectCommand`2.Select(`0)">
            <summary>
            Appends a column to the SQL <c>SELECT</c> clause using an enum-defined column from the primary table <typeparamref name="T"/>.
            </summary>
            <param name="Column">
            The enum member representing the column to select from the primary table.
            </param>
            <returns>
            The current <see cref="T:JunX.NETStandard.SQLBuilder.SelectCommand`2"/> instance, allowing fluent chaining of additional builder methods.
            </returns>
            <remarks>
            This method builds the column list for the SQL <c>SELECT</c> statement, inserting commas as needed.
            The column is fully qualified using the enum type name (e.g., <c>Table.Column</c>) to support multi-table joins.
            </remarks>
        </member>
        <member name="M:JunX.NETStandard.SQLBuilder.SelectCommand`2.Select(`1)">
            <summary>
            Appends a column to the SQL <c>SELECT</c> clause using an enum-defined column from the joined table <typeparamref name="J"/>.
            </summary>
            <param name="Column">
            The enum member representing the column to select from the joined table.
            </param>
            <returns>
            The current <see cref="T:JunX.NETStandard.SQLBuilder.SelectCommand`2"/> instance, allowing fluent chaining of additional builder methods.
            </returns>
            <remarks>
            This method builds the column list for the SQL <c>SELECT</c> statement, inserting commas as needed.
            The column is fully qualified using the enum type name (e.g., <c>JoinedTable.Column</c>) to support multi-table joins.
            </remarks>
        </member>
        <member name="M:JunX.NETStandard.SQLBuilder.SelectCommand`2.Select(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Appends multiple columns to the SQL <c>SELECT</c> clause using an enumerable of enum-defined columns from the primary table <typeparamref name="T"/>.
            </summary>
            <param name="Columns">
            A sequence of enum members representing the columns to select from the primary table.
            </param>
            <returns>
            The current <see cref="T:JunX.NETStandard.SQLBuilder.SelectCommand`2"/> instance, allowing fluent chaining of additional builder methods.
            </returns>
            <remarks>
            This method builds the column list for the SQL <c>SELECT</c> statement, inserting commas as needed.
            Each column is fully qualified using the enum type name (e.g., <c>PrimaryTable.Column</c>) to support multi-table joins.
            </remarks>
        </member>
        <member name="M:JunX.NETStandard.SQLBuilder.SelectCommand`2.Select(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Appends multiple columns to the SQL <c>SELECT</c> clause using an enumerable of enum-defined columns from the joined table <typeparamref name="J"/>.
            </summary>
            <param name="Columns">
            A sequence of enum members representing the columns to select from the joined table.
            </param>
            <returns>
            The current <see cref="T:JunX.NETStandard.SQLBuilder.SelectCommand`2"/> instance, allowing fluent chaining of additional builder methods.
            </returns>
            <remarks>
            This method builds the column list for the SQL <c>SELECT</c> statement, inserting commas as needed.
            Each column is fully qualified using the enum type name of <typeparamref name="J"/> (e.g., <c>JoinedTable.Column</c>) to support multi-table joins.
            </remarks>
        </member>
        <member name="M:JunX.NETStandard.SQLBuilder.SelectCommand`2.As(System.String)">
            <summary>
            Appends an <c>AS</c> alias clause to the SQL statement, renaming the most recently appended column or expression.
            </summary>
            <param name="Alias">
            The alias to assign, enclosed in single quotes (e.g., <c>'TotalAmount'</c>).
            </param>
            <returns>
            The current <see cref="T:JunX.NETStandard.SQLBuilder.SelectCommand`2"/> instance, allowing fluent chaining of additional builder methods.
            </returns>
            <remarks>
            This method is typically used immediately after a column or expression to assign a readable or contextual alias.
            Aliases are wrapped in single quotes to preserve casing, spacing, or reserved keywords.
            </remarks>
        </member>
        <member name="M:JunX.NETStandard.SQLBuilder.SelectCommand`2.SelectAs(System.Collections.Generic.IEnumerable{JunX.NETStandard.SQLBuilder.AliasMetadata{`0}})">
            <summary>
            Appends aliased column selections to the SQL <c>SELECT</c> clause using metadata from the primary table <typeparamref name="T"/>.
            </summary>
            <param name="SelectAs">
            A collection of <see cref="T:JunX.NETStandard.SQLBuilder.AliasMetadata`1"/> instances, each specifying a fully qualified column and its corresponding alias.
            </param>
            <returns>
            The current <see cref="T:JunX.NETStandard.SQLBuilder.SelectCommand`2"/> instance, allowing fluent chaining of additional builder methods.
            </returns>
            <remarks>
            This method appends each column-alias pair to the internal SQL command builder.
            If columns have already been added, a comma separator is inserted before appending the next.
            Aliases are wrapped in single quotes to preserve casing, spacing, or reserved keywords.
            Intended for use in dynamic query composition where column renaming is required for the primary table.
            </remarks>
        </member>
        <member name="M:JunX.NETStandard.SQLBuilder.SelectCommand`2.SelectAs(System.Collections.Generic.IEnumerable{JunX.NETStandard.SQLBuilder.AliasMetadata{`1}})">
            <summary>
            Appends aliased column selections to the SQL <c>SELECT</c> clause using metadata from the joined table <typeparamref name="J"/>.
            </summary>
            <param name="SelectAs">
            A collection of <see cref="T:JunX.NETStandard.SQLBuilder.AliasMetadata`1"/> instances, each specifying a fully qualified column and its corresponding alias.
            </param>
            <returns>
            The current <see cref="T:JunX.NETStandard.SQLBuilder.SelectCommand`2"/> instance, allowing fluent chaining of additional builder methods.
            </returns>
            <remarks>
            This method appends each column-alias pair to the internal SQL command builder.
            If columns have already been added, a comma separator is inserted before appending the next.
            Aliases are wrapped in single quotes to preserve casing, spacing, or reserved keywords.
            Intended for use in dynamic query composition where column renaming is required for the joined table.
            </remarks>
        </member>
        <member name="M:JunX.NETStandard.SQLBuilder.SelectCommand`2.Join(JunX.NETStandard.SQLBuilder.JoinModes,`0,`1)">
            <summary>
            Appends a SQL <c>JOIN</c> clause to the <c>SELECT</c> statement using the specified join mode and column pair.
            </summary>
            <param name="JoinMode">
            The type of join to apply (e.g., <c>INNER_JOIN</c>, <c>LEFT_JOIN</c>), formatted with spaces between words.
            </param>
            <param name="Left">
            The enum member from the primary table <typeparamref name="T"/> representing the left-side join column.
            </param>
            <param name="Right">
            The enum member from the joined table <typeparamref name="J"/> representing the right-side join column.
            </param>
            <returns>
            The current <see cref="T:JunX.NETStandard.SQLBuilder.SelectCommand`2"/> instance, allowing fluent chaining of additional builder methods.
            </returns>
            <remarks>
            This method appends a join clause to the SQL command builder, using fully qualified column names from both enum types.
            The join mode is formatted by replacing underscores with spaces to match SQL syntax.
            </remarks>
        </member>
        <member name="M:JunX.NETStandard.SQLBuilder.SelectCommand`2.OrderBy(`0,JunX.NETStandard.SQLBuilder.OrderByModes)">
            <summary>
            Appends an <c>ORDER BY</c> clause to the SQL <c>SELECT</c> statement using a column from the primary table <typeparamref name="T"/>.
            </summary>
            <param name="OrderBy">
            The enum member representing the column to sort by from the primary table.
            </param>
            <param name="OrderMode">
            The sort direction to apply (e.g., <c>ASC</c>, <c>DESC</c>), specified via <see cref="T:JunX.NETStandard.SQLBuilder.OrderByModes"/>.
            </param>
            <returns>
            The current <see cref="T:JunX.NETStandard.SQLBuilder.SelectCommand`2"/> instance, allowing fluent chaining of additional builder methods.
            </returns>
            <remarks>
            This method appends a fully qualified column and sort direction to the SQL <c>ORDER BY</c> clause.
            Intended for use when sorting results based on columns from the primary table.
            </remarks>
        </member>
        <member name="M:JunX.NETStandard.SQLBuilder.SelectCommand`2.OrderBy(`1,JunX.NETStandard.SQLBuilder.OrderByModes)">
            <summary>
            Appends an <c>ORDER BY</c> clause to the SQL <c>SELECT</c> statement using a column from the joined table <typeparamref name="J"/>.
            </summary>
            <param name="OrderBy">
            The enum member representing the column to sort by from the joined table.
            </param>
            <param name="OrderMode">
            The sort direction to apply (e.g., <c>ASC</c>, <c>DESC</c>), specified via <see cref="T:JunX.NETStandard.SQLBuilder.OrderByModes"/>.
            </param>
            <returns>
            The current <see cref="T:JunX.NETStandard.SQLBuilder.SelectCommand`2"/> instance, allowing fluent chaining of additional builder methods.
            </returns>
            <remarks>
            This method appends a fully qualified column and sort direction to the SQL <c>ORDER BY</c> clause.
            Intended for use when sorting results based on columns from the joined table.
            </remarks>
        </member>
        <member name="T:JunX.NETStandard.SQLBuilder.SelectCommand`1">
            <summary>
            Provides a fluent, strongly typed builder for composing SQL <c>SELECT</c> statements using enum-based column definitions.
            </summary>
            <typeparam name="T">
            The enum type representing the table's column names. Must be a valid <see cref="T:System.Enum"/>.
            </typeparam>
            <remarks>
            This class supports dynamic SQL generation with fluent chaining of clauses such as <c>SELECT</c>, <c>FROM</c>, <c>WHERE</c>, <c>ORDER BY</c>, and aliasing.
            It tracks internal state to manage comma placement, condition grouping, and clause sequencing.
            Intended for scenarios where enum-based metadata drives query composition, such as code-generated schemas or SDK-level abstractions.
            </remarks>
        </member>
        <member name="M:JunX.NETStandard.SQLBuilder.SelectCommand`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:JunX.NETStandard.SQLBuilder.SelectCommand`1"/> class and begins composing an SQL <c>SELECT</c> statement.
            </summary>
            <remarks>
            Resets internal flags to track column and condition state during query construction.
            </remarks>
        </member>
        <member name="M:JunX.NETStandard.SQLBuilder.SelectCommand`1.ToString">
            <summary>
            Returns the composed SQL <c>SELECT</c> statement as a complete string.
            </summary>
            <returns>
            A string representing the finalized SQL query, terminated with a semicolon.
            </returns>
            <remarks>
            This method completes the builder output for execution or inspection.
            </remarks>
        </member>
        <member name="P:JunX.NETStandard.SQLBuilder.SelectCommand`1.From">
            <summary>
            Appends the <c>FROM</c> clause to the SQL <c>SELECT</c> statement using the enum type name as the table name.
            </summary>
            <returns>
            The current <see cref="T:JunX.NETStandard.SQLBuilder.SelectCommand`1"/> instance, allowing fluent chaining of additional builder methods.
            </returns>
            <remarks>
            This property infers the table name from the enum type <typeparamref name="T"/> and appends it to the query.
            </remarks>
        </member>
        <member name="P:JunX.NETStandard.SQLBuilder.SelectCommand`1.SelectAll">
            <summary>
            Appends a wildcard <c>*</c> to the SQL <c>SELECT</c> clause, selecting all columns from the primary table.
            </summary>
            <returns>The current <see cref="T:JunX.NETStandard.SQLBuilder.SelectCommand`1"/> instance for fluent chaining.</returns>
        </member>
        <member name="P:JunX.NETStandard.SQLBuilder.SelectCommand`1.StartWhere">
            <summary>
            Begins composition of a SQL <c>WHERE</c> clause for a <c>SELECT</c> command involving a single primary table.
            </summary>
            <returns>A new <see cref="!:WhereClause&lt;SelectCommand&lt;T&gt;, T&gt;"/> instance bound to this command.</returns>
        </member>
        <member name="P:JunX.NETStandard.SQLBuilder.SelectCommand`1.Distinct">
            <summary>
            Appends a DISTINCT clause to the SQL command to ensure unique rows in the result set.
            </summary>
        </member>
        <member name="M:JunX.NETStandard.SQLBuilder.SelectCommand`1.Select(`0,System.Boolean)">
            <summary>
            Appends a column to the SQL <c>SELECT</c> clause using an enum-defined column, with optional full qualification.
            </summary>
            <param name="Column">
            The enum member representing the column to select.
            </param>
            <param name="IsFullyQualified">
            If <c>true</c>, prefixes the column with the enum type name to fully qualify it (e.g., <c>Table.Column</c>); otherwise, uses the column name alone.
            </param>
            <returns>
            The current <see cref="T:JunX.NETStandard.SQLBuilder.SelectCommand`1"/> instance, allowing fluent chaining of additional builder methods.
            </returns>
            <remarks>
            This method builds the column list for the SQL select statement, inserting commas as needed.
            </remarks>
        </member>
        <member name="M:JunX.NETStandard.SQLBuilder.SelectCommand`1.Select(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Appends multiple columns to the SQL <c>SELECT</c> clause using an enumerable of enum-defined columns, with optional full qualification.
            </summary>
            <param name="Columns">
            A sequence of enum members representing the columns to select.
            </param>
            <param name="IsFullyQualified">
            If <c>true</c>, prefixes each column with the enum type name to fully qualify it (e.g., <c>Table.Column</c>); otherwise, uses the column name alone.
            </param>
            <returns>
            The current <see cref="T:JunX.NETStandard.SQLBuilder.SelectCommand`1"/> instance, allowing fluent chaining of additional builder methods.
            </returns>
            <remarks>
            This method builds the column list for the SQL select statement, inserting commas as needed.
            </remarks>
        </member>
        <member name="M:JunX.NETStandard.SQLBuilder.SelectCommand`1.As(System.String)">
            <summary>
            Appends an <c>AS</c> alias clause to the SQL statement, renaming the current expression or column.
            </summary>
            <param name="Alias">
            The alias to assign, enclosed in single quotes (e.g., <c>'TotalAmount'</c>).
            </param>
            <returns>
            The current <see cref="T:JunX.NETStandard.SQLBuilder.SelectCommand`1"/> instance, allowing fluent chaining of additional builder methods.
            </returns>
            <remarks>
            This method is typically used after a column or expression to assign a readable or contextual alias.
            </remarks>
        </member>
        <member name="M:JunX.NETStandard.SQLBuilder.SelectCommand`1.SelectAs(System.Collections.Generic.IEnumerable{JunX.NETStandard.SQLBuilder.AliasMetadata{`0}})">
            <summary>
            Appends aliased column selections to the SQL <c>SELECT</c> clause using the provided metadata.
            </summary>
            <param name="SelectAs">
            A collection of <see cref="T:JunX.NETStandard.SQLBuilder.AliasMetadata`1"/> instances, each specifying a column and its corresponding alias.
            </param>
            <returns>
            The current <see cref="T:JunX.NETStandard.SQLBuilder.SelectCommand`1"/> instance for fluent chaining.
            </returns>
            <remarks>
            This method appends each column-alias pair to the internal SQL command builder.
            If columns have already been added, a comma separator is inserted before appending the next.
            Aliases are wrapped in single quotes to preserve casing and spacing.
            Intended for use in dynamic query composition where column renaming is required.
            </remarks>
        </member>
        <member name="M:JunX.NETStandard.SQLBuilder.SelectCommand`1.OrderBy(`0,JunX.NETStandard.SQLBuilder.OrderByModes)">
            <summary>
            Appends an <c>ORDER BY</c> clause to the SQL query using the specified column and sort direction.
            </summary>
            <param name="OrderBy">
            The column to sort by, represented by the generic type <typeparamref name="T"/>.
            </param>
            <param name="OrderMode">
            The sort direction, either <c>ASC</c> or <c>DESC</c>, specified via <see cref="T:JunX.NETStandard.SQLBuilder.OrderByModes"/>.
            </param>
            <returns>
            The current <see cref="T:JunX.NETStandard.SQLBuilder.SelectCommand`1"/> instance for fluent chaining.
            </returns>
            <remarks>
            This method appends an <c>ORDER BY</c> clause to the internal SQL command builder,
            using the provided column and sort mode. Intended for use in dynamic query composition
            where result ordering is required.
            </remarks>
        </member>
        <member name="T:JunX.NETStandard.SQLBuilder.SelectCommand">
            <summary>
            Provides a fluent, loosely typed builder for composing SQL <c>SELECT</c> statements using raw string identifiers.
            </summary>
            <remarks>
            This class supports dynamic SQL generation with fluent chaining of clauses such as <c>SELECT</c>, <c>FROM</c>, <c>JOIN</c>, <c>WHERE</c>, <c>ORDER BY</c>, and aliasing.
            It tracks internal state to manage comma placement, condition grouping, and clause sequencing.
            Intended for scenarios where table and column names are provided as strings, enabling flexible query composition without enum constraints.
            </remarks>
        </member>
        <member name="M:JunX.NETStandard.SQLBuilder.SelectCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:JunX.NETStandard.SQLBuilder.SelectCommand"/> class and begins a SQL <c>SELECT</c> statement.
            </summary>
            <remarks>
            This constructor initializes the internal command buffer with <c>SELECT</c> and resets tracking flags for column and <c>WHERE</c> clause composition.
            Use this as the starting point for building dynamic SQL queries.
            </remarks>
        </member>
        <member name="M:JunX.NETStandard.SQLBuilder.SelectCommand.ToString">
            <summary>
            Returns the composed SQL <c>SELECT</c> statement as a string, terminated with a semicolon.
            </summary>
            <returns>
            A complete SQL query string representing the current state of the builder.
            </returns>
            <remarks>
            This override finalizes the query for execution or inspection by appending a terminating semicolon.
            </remarks>
        </member>
        <member name="P:JunX.NETStandard.SQLBuilder.SelectCommand.Distinct">
            <summary>
            Appends a DISTINCT clause to the SQL command to eliminate duplicate rows from the result set.
            </summary>
        </member>
        <member name="P:JunX.NETStandard.SQLBuilder.SelectCommand.StartWhere">
            <summary>
            Begins composition of a SQL <c>WHERE</c> clause for a <c>SELECT</c> command without generic table bindings.
            </summary>
            <returns>A new <see cref="T:JunX.NETStandard.SQLBuilder.WhereClause`1"/> instance bound to this command.</returns>
        </member>
        <member name="M:JunX.NETStandard.SQLBuilder.SelectCommand.Select(System.String)">
            <summary>
            Appends a column to the SQL <c>SELECT</c> clause using a raw string identifier.
            </summary>
            <param name="Column">
            The name of the column to include in the <c>SELECT</c> clause.
            </param>
            <returns>
            The current <see cref="T:JunX.NETStandard.SQLBuilder.SelectCommand"/> instance, allowing fluent chaining of additional builder methods.
            </returns>
            <remarks>
            This method supports dynamic or loosely typed column selection. If one or more columns have already been added, a comma is prepended.
            </remarks>
        </member>
        <member name="M:JunX.NETStandard.SQLBuilder.SelectCommand.Select(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Appends multiple columns to the SQL <c>SELECT</c> clause using raw string identifiers.
            </summary>
            <param name="Columns">
            A sequence of column names to include in the <c>SELECT</c> clause.
            </param>
            <returns>
            The current <see cref="T:JunX.NETStandard.SQLBuilder.SelectCommand"/> instance, allowing fluent chaining of additional builder methods.
            </returns>
            <remarks>
            This method supports dynamic column selection. Commas are automatically inserted between columns as needed.
            </remarks>
        </member>
        <member name="M:JunX.NETStandard.SQLBuilder.SelectCommand.As(System.String)">
            <summary>
            Appends an <c>AS</c> alias clause to the SQL statement, renaming the most recently added column or expression.
            </summary>
            <param name="Alias">
            The alias to assign, enclosed in single quotes (e.g., <c>'TotalAmount'</c>).
            </param>
            <returns>
            The current <see cref="T:JunX.NETStandard.SQLBuilder.SelectCommand"/> instance, allowing fluent chaining of additional builder methods.
            </returns>
            <remarks>
            This method is typically used after a column or expression to assign a readable or contextual alias.
            It assumes that a valid column or expression was previously appended to the command buffer.
            </remarks>
        </member>
        <member name="M:JunX.NETStandard.SQLBuilder.SelectCommand.From(System.String)">
            <summary>
            Appends a <c>FROM</c> clause to the SQL <c>SELECT</c> statement using a raw table name.
            </summary>
            <param name="Table">
            The name of the table to query from.
            </param>
            <returns>
            The current <see cref="T:JunX.NETStandard.SQLBuilder.SelectCommand"/> instance, allowing fluent chaining of additional builder methods.
            </returns>
            <remarks>
            This method sets the source table for the query. It assumes that the <c>SELECT</c> clause has already been initialized.
            </remarks>
        </member>
        <member name="M:JunX.NETStandard.SQLBuilder.SelectCommand.Join(JunX.NETStandard.SQLBuilder.JoinModes,System.String,System.String,System.String)">
            <summary>
            Appends a SQL <c>JOIN</c> clause to the <c>SELECT</c> statement using the specified join mode and condition.
            </summary>
            <param name="JoinMode">
            The type of join to apply (e.g., <c>INNER_JOIN</c>, <c>LEFT_JOIN</c>), represented by the <see cref="T:JunX.NETStandard.SQLBuilder.JoinModes"/> enum.
            Underscores in enum names are automatically replaced with spaces (e.g., <c>LEFT_JOIN</c> → <c>LEFT JOIN</c>).
            </param>
            <param name="JoinTable">
            The name of the table to join.
            </param>
            <param name="OnLeft">
            The left-hand side of the join condition, typically a column from the base table.
            </param>
            <param name="OnRight">
            The right-hand side of the join condition, typically a column from the joined table.
            </param>
            <returns>
            The current <see cref="T:JunX.NETStandard.SQLBuilder.SelectCommand"/> instance, allowing fluent chaining of additional builder methods.
            </returns>
            <remarks>
            This method constructs a join clause like <c>LEFT JOIN Orders ON Customers.Id = Orders.CustomerId</c>.
            It assumes that the base table has already been specified via <see cref="M:JunX.NETStandard.SQLBuilder.SelectCommand.From(System.String)"/>.
            </remarks>
        </member>
        <member name="M:JunX.NETStandard.SQLBuilder.SelectCommand.OrderBy(System.String,JunX.NETStandard.SQLBuilder.OrderByModes)">
            <summary>
            Appends an <c>ORDER BY</c> clause to the SQL <c>SELECT</c> statement using the specified column and sort direction.
            </summary>
            <param name="OrderBy">
            The name of the column to sort by.
            </param>
            <param name="OrderMode">
            The sort direction, represented by the <see cref="!:MySQLOrderBy"/> enum (e.g., <c>ASC</c>, <c>DESC</c>).
            </param>
            <returns>
            The current <see cref="T:JunX.NETStandard.SQLBuilder.SelectCommand"/> instance, allowing fluent chaining of additional builder methods.
            </returns>
            <remarks>
            This method constructs a clause like <c>ORDER BY CreatedDate DESC</c>. It assumes that the <c>SELECT</c> and <c>FROM</c> clauses have already been composed.
            </remarks>
        </member>
        <member name="T:JunX.NETStandard.SQLBuilder.AliasMetadata`1">
            <summary>
            Represents metadata for aliasing a column in SQL, pairing an enum-defined column with its alias and fully qualified name.
            </summary>
            <typeparam name="T">
            An <see cref="T:System.Enum"/> type representing the table whose member defines the column being aliased.
            </typeparam>
            <remarks>
            This struct is used to associate a column with its SQL alias and generate fully qualified references for query composition.
            </remarks>
        </member>
        <member name="M:JunX.NETStandard.SQLBuilder.AliasMetadata`1.#ctor(`0,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:JunX.NETStandard.SQLBuilder.AliasMetadata`1"/> struct with the specified column and alias.
            </summary>
            <param name="Select">
            The enum member representing the column to be aliased.
            </param>
            <param name="As">
            The alias to assign to the column in SQL output.
            </param>
            <remarks>
            This constructor pairs a metadata-defined column with its alias, enabling qualified selection and readable output in SQL queries.
            </remarks>
        </member>
        <member name="T:JunX.NETStandard.SQLBuilder.ValuesMetadata">
            <summary>
            Encapsulates a raw value and its associated data type, providing a SQL-safe representation for query composition.
            </summary>
            <remarks>
            This struct is typically used to wrap literal values with type metadata, enabling safe formatting for SQL statements.
            The <see cref="P:JunX.NETStandard.SQLBuilder.ValuesMetadata.Value"/> property returns a sanitized version of the raw input using <c>Methods.SQLSafeValue</c>, based on its <see cref="P:JunX.NETStandard.SQLBuilder.ValuesMetadata.DataType"/>.
            </remarks>
        </member>
        <member name="P:JunX.NETStandard.SQLBuilder.ValuesMetadata.Value">
            <summary>
            Gets the SQL-safe representation of the raw value, formatted according to its declared <see cref="P:JunX.NETStandard.SQLBuilder.ValuesMetadata.DataType"/>.
            </summary>
            <value>
            A string that is safe for direct inclusion in SQL statements, escaped or quoted as needed.
            </value>
            <remarks>
            This property delegates to <c>Methods.SQLSafeValue</c> to sanitize the raw input based on its type.
            Useful for dynamic query generation where values must be safely embedded without risking injection or formatting errors.
            </remarks>
        </member>
        <member name="M:JunX.NETStandard.SQLBuilder.ValuesMetadata.#ctor(System.String,JunX.NETStandard.SQLBuilder.DataTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:JunX.NETStandard.SQLBuilder.ValuesMetadata"/> struct with a raw value and its associated data type.
            </summary>
            <param name="SetValue">
            The raw string value to be wrapped and later formatted for SQL usage.
            </param>
            <param name="SetDataType">
            The classification of the value as either <see cref="F:JunX.NETStandard.SQLBuilder.DataTypes.Numeric"/> or <see cref="F:JunX.NETStandard.SQLBuilder.DataTypes.NonNumeric"/>, used for safe SQL formatting.
            </param>
            <remarks>
            This constructor sets the internal fields used by the <see cref="P:JunX.NETStandard.SQLBuilder.ValuesMetadata.Value"/> property to produce a SQL-safe output.
            </remarks>
        </member>
        <member name="T:JunX.NETStandard.SQLBuilder.UpdateMetadata`1">
            <summary>
            Encapsulates metadata for a column-value pair used in SQL <c>UPDATE</c> statements, including type-safe column identification and SQL-safe value formatting.
            </summary>
            <typeparam name="T">
            An enum type representing the column schema of the target table. Each enum member corresponds to a column name.
            </typeparam>
            <remarks>
            This struct wraps a raw value with its associated data type and column reference, enabling safe and structured update logic.
            The <see cref="P:JunX.NETStandard.SQLBuilder.UpdateMetadata`1.Value"/> property returns a sanitized version of the raw input using <c>Methods.SQLSafeValue</c>, based on its <see cref="P:JunX.NETStandard.SQLBuilder.UpdateMetadata`1.DataType"/>.
            </remarks>
        </member>
        <member name="P:JunX.NETStandard.SQLBuilder.UpdateMetadata`1.Column">
            <summary>
            Gets or sets the enum member representing the column to be updated in the SQL <c>UPDATE</c> statement.
            </summary>
            <value>
            An enum value of type <typeparamref name="T"/> that identifies the target column for the update operation.
            </value>
            <remarks>
            This property provides type-safe access to the column being updated, ensuring alignment with the schema defined by <typeparamref name="T"/>.
            </remarks>
        </member>
        <member name="P:JunX.NETStandard.SQLBuilder.UpdateMetadata`1.Value">
            <summary>
            Gets the SQL-safe representation of the raw value, formatted according to its declared <see cref="P:JunX.NETStandard.SQLBuilder.UpdateMetadata`1.DataType"/>.
            </summary>
            <value>
            A string that is safe for direct inclusion in SQL <c>UPDATE</c> statements, escaped or quoted as needed.
            </value>
            <remarks>
            This property delegates to <c>Methods.SQLSafeValue</c> to sanitize the raw input based on its type,
            ensuring protection against injection and preserving correct formatting for numeric and non-numeric values.
            </remarks>
        </member>
        <member name="M:JunX.NETStandard.SQLBuilder.UpdateMetadata`1.#ctor(`0,System.String,JunX.NETStandard.SQLBuilder.DataTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:JunX.NETStandard.SQLBuilder.UpdateMetadata`1"/> struct with a column, raw value, and associated data type.
            </summary>
            <param name="SetColumn">
            The enum member representing the column to be updated.
            </param>
            <param name="SetValue">
            The raw string value to assign to the column.
            </param>
            <param name="SetDataType">
            The classification of the value as either <see cref="F:JunX.NETStandard.SQLBuilder.DataTypes.Numeric"/> or <see cref="F:JunX.NETStandard.SQLBuilder.DataTypes.NonNumeric"/>, used for SQL-safe formatting.
            </param>
            <remarks>
            This constructor sets the internal metadata required to produce a SQL-safe update expression via the <see cref="P:JunX.NETStandard.SQLBuilder.UpdateMetadata`1.Value"/> property.
            </remarks>
        </member>
        <member name="T:JunX.NETStandard.SQLBuilder.UpdateMetadata">
            <summary>
            Encapsulates metadata for a column-value pair used in SQL <c>UPDATE</c> statements, including the column name, raw value, and its associated data type.
            </summary>
            <remarks>
            This struct provides a type-aware wrapper for update logic, ensuring that values are formatted safely for SQL execution via the <see cref="P:JunX.NETStandard.SQLBuilder.UpdateMetadata.Value"/> property.
            It is designed for dynamic update scenarios where column names are represented as strings rather than enums.
            </remarks>
        </member>
        <member name="P:JunX.NETStandard.SQLBuilder.UpdateMetadata.Column">
            <summary>
            Gets or sets the name of the column to be updated in the SQL <c>UPDATE</c> statement.
            </summary>
            <value>
            A string representing the target column name in the database.
            </value>
            <remarks>
            This property provides a flexible, string-based reference to the column, suitable for dynamic or loosely typed update scenarios.
            </remarks>
        </member>
        <member name="P:JunX.NETStandard.SQLBuilder.UpdateMetadata.Value">
            <summary>
            Gets the SQL-safe representation of the raw value, formatted according to its declared <see cref="P:JunX.NETStandard.SQLBuilder.UpdateMetadata.DataType"/>.
            </summary>
            <value>
            A string that is safe for direct inclusion in SQL <c>UPDATE</c> statements, escaped or quoted as needed.
            </value>
            <remarks>
            This property delegates to <c>Methods.SQLSafeValue</c> to sanitize the raw input based on its type,
            ensuring protection against injection and preserving correct formatting for numeric and non-numeric values.
            </remarks>
        </member>
        <member name="M:JunX.NETStandard.SQLBuilder.UpdateMetadata.#ctor(System.String,System.String,JunX.NETStandard.SQLBuilder.DataTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:JunX.NETStandard.SQLBuilder.UpdateMetadata"/> struct with a column name, raw value, and associated data type.
            </summary>
            <param name="SetColumn">
            The name of the column to be updated.
            </param>
            <param name="SetValue">
            The raw string value to assign to the column.
            </param>
            <param name="SetDataType">
            The classification of the value as either <see cref="F:JunX.NETStandard.SQLBuilder.DataTypes.Numeric"/> or <see cref="F:JunX.NETStandard.SQLBuilder.DataTypes.NonNumeric"/>, used for SQL-safe formatting.
            </param>
            <remarks>
            This constructor sets the internal metadata required to produce a SQL-safe update expression via the <see cref="P:JunX.NETStandard.SQLBuilder.UpdateMetadata.Value"/> property.
            </remarks>
        </member>
        <member name="T:JunX.NETStandard.SQLBuilder.TruncateCommand`1">
            <summary>
            Represents a fluent SQL <c>TRUNCATE TABLE</c> statement builder targeting a table mapped from the enum type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">
            An enum type whose name corresponds to the target table to be truncated.
            </typeparam>
            <remarks>
            This class provides a metadata-driven approach to constructing SQL <c>TRUNCATE</c> statements, using the enum type <typeparamref name="T"/> to infer the table name.
            Designed for scenarios where compile-time enum mapping drives table targeting and schema safety.
            </remarks>
        </member>
        <member name="M:JunX.NETStandard.SQLBuilder.TruncateCommand`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:JunX.NETStandard.SQLBuilder.TruncateCommand`1"/> class for building a SQL <c>TRUNCATE TABLE</c> statement targeting the specified entity type.
            </summary>
            <remarks>
            This constructor begins the command with <c>TRUNCATE TABLE</c> followed by the name of the type <typeparamref name="T"/>.
            Intended for metadata-driven truncation logic where <typeparamref name="T"/> maps to a table name.
            </remarks>
        </member>
        <member name="M:JunX.NETStandard.SQLBuilder.TruncateCommand`1.ToString">
            <summary>
            Returns the composed SQL <c>TRUNCATE TABLE</c> statement as a string, terminated with a semicolon.
            </summary>
            <returns>
            A complete SQL query string representing the current state of the truncate builder.
            </returns>
            <remarks>
            This override finalizes the command buffer for execution or inspection. It assumes the target table has been correctly inferred from <typeparamref name="T"/>.
            </remarks>
        </member>
        <member name="T:JunX.NETStandard.SQLBuilder.TruncateCommand">
            <summary>
            Represents a fluent SQL <c>TRUNCATE TABLE</c> statement builder for manually specified table names.
            </summary>
            <remarks>
            This class provides a flexible approach to constructing SQL <c>TRUNCATE</c> statements by allowing the target table name to be set at runtime.
            Designed for scenarios where table names are not known at compile time or are determined dynamically.
            </remarks>
        </member>
        <member name="M:JunX.NETStandard.SQLBuilder.TruncateCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:JunX.NETStandard.SQLBuilder.TruncateCommand"/> class for building a SQL <c>TRUNCATE TABLE</c> statement.
            </summary>
            <remarks>
            This constructor begins the command with <c>TRUNCATE TABLE</c>, allowing the target table name to be appended later via the <c>Truncate(string Table)</c> method.
            Designed for runtime-driven workflows where table names are specified dynamically.
            </remarks>
        </member>
        <member name="M:JunX.NETStandard.SQLBuilder.TruncateCommand.ToString">
            <summary>
            Returns the composed SQL <c>TRUNCATE TABLE</c> statement as a string, terminated with a semicolon.
            </summary>
            <returns>
            A complete SQL query string representing the current state of the truncate builder.
            </returns>
            <remarks>
            This override finalizes the command buffer for execution or inspection. It assumes the target table name has been appended using the <c>Truncate(string Table)</c> method.
            </remarks>
        </member>
        <member name="M:JunX.NETStandard.SQLBuilder.TruncateCommand.Truncate(System.String)">
            <summary>
            Appends the specified table name to the SQL <c>TRUNCATE TABLE</c> statement.
            </summary>
            <param name="Table">
            The name of the table to truncate. This should be a valid SQL identifier and may include schema qualification if needed.
            </param>
            <returns>
            The current <see cref="T:JunX.NETStandard.SQLBuilder.TruncateCommand"/> instance, allowing fluent chaining or finalization.
            </returns>
            <remarks>
            This method completes the <c>TRUNCATE TABLE</c> statement by appending the target table name.
            Use when table names are determined dynamically at runtime.
            </remarks>
        </member>
        <member name="T:JunX.NETStandard.SQLBuilder.UpdateCommand`1">
            <summary>
            Provides a fluent, strongly typed builder for composing SQL <c>UPDATE</c> statements using enum-defined column metadata.
            </summary>
            <typeparam name="T">
            An enum type representing the target table's column schema. Each enum member corresponds to a column name.
            </typeparam>
            <remarks>
            This class supports dynamic SQL generation for update operations, including column-value assignments and conditional filtering.
            It tracks internal state to manage clause sequencing, grouping, and connector placement.
            Designed for scenarios where schema is represented via enums, enabling type-safe and metadata-driven query composition.
            </remarks>
        </member>
        <member name="M:JunX.NETStandard.SQLBuilder.UpdateCommand`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:JunX.NETStandard.SQLBuilder.UpdateCommand`1"/> class for building a SQL <c>UPDATE</c> statement.
            </summary>
            <remarks>
            This constructor sets up the internal command buffer and begins the statement with <c>UPDATE</c> followed by the name of the enum type <typeparamref name="T"/>.
            It also resets the internal flag used to track whether any <c>SET</c> clauses have been appended.
            </remarks>
        </member>
        <member name="M:JunX.NETStandard.SQLBuilder.UpdateCommand`1.ToString">
            <summary>
            Returns the composed SQL <c>UPDATE</c> statement as a string, terminated with a semicolon.
            </summary>
            <returns>
            A complete SQL query string representing the current state of the update builder.
            </returns>
            <remarks>
            This override finalizes the command buffer for execution or inspection. It assumes that the <c>SET</c> clauses have been properly appended.
            </remarks>
        </member>
        <member name="P:JunX.NETStandard.SQLBuilder.UpdateCommand`1.StartWhere">
            <summary>
            Begins composition of a SQL <c>WHERE</c> clause for an <c>UPDATE</c> command involving a single primary table.
            </summary>
            <returns>A new <see cref="!:WhereClause&lt;UpdateCommand&lt;T&gt;, T&gt;"/> instance bound to this command.</returns>
        </member>
        <member name="M:JunX.NETStandard.SQLBuilder.UpdateCommand`1.Set(JunX.NETStandard.SQLBuilder.UpdateMetadata{`0})">
            <summary>
            Appends a column-value assignment to the SQL <c>SET</c> clause of the <c>UPDATE</c> statement using typed metadata.
            </summary>
            <param name="UpdateData">
            An instance of <see cref="T:JunX.NETStandard.SQLBuilder.UpdateMetadata`1"/> containing the target column, raw value, and associated data type for SQL-safe formatting.
            </param>
            <returns>
            The current <see cref="T:JunX.NETStandard.SQLBuilder.UpdateCommand`1"/> instance, allowing fluent chaining of additional builder methods.
            </returns>
            <remarks>
            This method begins the <c>SET</c> clause if it hasn't already started, and appends the column assignment in the form <c>Column = Value</c>.
            Each value is formatted safely using the metadata's <c>Value</c> property.
            </remarks>
        </member>
        <member name="M:JunX.NETStandard.SQLBuilder.UpdateCommand`1.Set(System.Collections.Generic.IEnumerable{JunX.NETStandard.SQLBuilder.UpdateMetadata{`0}})">
            <summary>
            Appends multiple column-value assignments to the SQL <c>SET</c> clause of the <c>UPDATE</c> statement using typed metadata.
            </summary>
            <param name="UpdateData">
            A sequence of <see cref="T:JunX.NETStandard.SQLBuilder.UpdateMetadata`1"/> instances, each containing a column, raw value, and associated data type for SQL-safe formatting.
            </param>
            <returns>
            The current <see cref="T:JunX.NETStandard.SQLBuilder.UpdateCommand`1"/> instance, allowing fluent chaining of additional builder methods.
            </returns>
            <remarks>
            This method begins the <c>SET</c> clause if it hasn't already started, and appends each assignment in the form <c>Column = Value</c>, separated by commas.
            Each value is formatted safely using the metadata's <c>Value</c> property.
            </remarks>
        </member>
        <member name="T:JunX.NETStandard.SQLBuilder.UpdateCommand">
            <summary>
            Represents a dynamic SQL <c>UPDATE</c> statement builder without compile-time column typing.
            </summary>
            <remarks>
            This class provides a fluent interface for constructing SQL <c>UPDATE</c> commands using string-based column names and values.
            It tracks internal state for <c>SET</c> and <c>WHERE</c> clause composition, enabling safe and modular update logic.
            Intended for scenarios where column metadata is resolved at runtime rather than via enums.
            </remarks>
        </member>
        <member name="M:JunX.NETStandard.SQLBuilder.UpdateCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:JunX.NETStandard.SQLBuilder.UpdateCommand"/> class for building a SQL <c>UPDATE</c> statement.
            </summary>
            <remarks>
            This constructor sets up the internal command buffer and begins the statement with the <c>UPDATE</c> keyword.
            It also resets internal flags used to track whether any <c>SET</c> or <c>WHERE</c> clauses have been appended.
            Intended for dynamic SQL composition without compile-time column typing.
            </remarks>
        </member>
        <member name="M:JunX.NETStandard.SQLBuilder.UpdateCommand.ToString">
            <summary>
            Returns the composed SQL <c>UPDATE</c> statement as a string, terminated with a semicolon.
            </summary>
            <returns>
            A complete SQL query string representing the current state of the update builder.
            </returns>
            <remarks>
            This override finalizes the command buffer for execution or inspection. It assumes that any necessary <c>SET</c> and <c>WHERE</c> clauses have been appended.
            </remarks>
        </member>
        <member name="P:JunX.NETStandard.SQLBuilder.UpdateCommand.StartWhere">
            <summary>
            Begins composition of a SQL <c>WHERE</c> clause for an <c>UPDATE</c> command using fluent syntax.
            </summary>
            <returns>A new <see cref="T:JunX.NETStandard.SQLBuilder.WhereClause`1"/> instance bound to this command.</returns>
        </member>
        <member name="M:JunX.NETStandard.SQLBuilder.UpdateCommand.Update(System.String)">
            <summary>
            Appends the target table name to the SQL <c>UPDATE</c> statement.
            </summary>
            <param name="Table">
            The name of the table to be updated.
            </param>
            <returns>
            The current <see cref="T:JunX.NETStandard.SQLBuilder.UpdateCommand"/> instance, allowing fluent chaining of additional builder methods.
            </returns>
            <remarks>
            This method completes the initial <c>UPDATE</c> clause by specifying the table name.
            It should be called before appending <c>SET</c> or <c>WHERE</c> clauses.
            </remarks>
        </member>
        <member name="M:JunX.NETStandard.SQLBuilder.UpdateCommand.Set(JunX.NETStandard.SQLBuilder.UpdateMetadata)">
            <summary>
            Appends a single column-value assignment to the <c>SET</c> clause of the SQL <c>UPDATE</c> statement.
            </summary>
            <param name="UpdateData">
            An <see cref="T:JunX.NETStandard.SQLBuilder.UpdateMetadata"/> instance containing the column name, raw value, and its associated SQL data type.
            </param>
            <returns>
            The current <see cref="T:JunX.NETStandard.SQLBuilder.UpdateCommand"/> instance, allowing fluent chaining of additional builder methods.
            </returns>
            <remarks>
            This method begins the <c>SET</c> clause if it hasn't been started, and appends the assignment in the form <c>Column=Value</c>.
            The value is formatted safely using <c>Construct.SQLSafeValue</c> via the metadata's <c>Value</c> property.
            </remarks>
        </member>
        <member name="M:JunX.NETStandard.SQLBuilder.UpdateCommand.Set(System.Collections.Generic.IEnumerable{JunX.NETStandard.SQLBuilder.UpdateMetadata})">
            <summary>
            Appends multiple column-value assignments to the <c>SET</c> clause of the SQL <c>UPDATE</c> statement using metadata.
            </summary>
            <param name="UpdateData">
            A sequence of <see cref="T:JunX.NETStandard.SQLBuilder.UpdateMetadata"/> instances, each containing a column name, raw value, and its associated SQL data type.
            </param>
            <returns>
            The current <see cref="T:JunX.NETStandard.SQLBuilder.UpdateCommand"/> instance, allowing fluent chaining of additional builder methods.
            </returns>
            <remarks>
            This method begins the <c>SET</c> clause if it hasn't been started, and appends each assignment in the form <c>Column=Value</c>.
            Values are formatted safely using the metadata's <c>Value</c> property, ensuring proper escaping and type-aware SQL hygiene.
            </remarks>
        </member>
        <member name="T:JunX.NETStandard.SQLBuilder.WhereClause`3">
            <summary>
            Provides a fluent interface for composing SQL <c>WHERE</c> clauses with support for logical operators and joined table references.
            </summary>
            <typeparam name="TCommand">The parent SQL builder type that this clause is attached to, enabling fluent chaining.</typeparam>
            <typeparam name="T">An enum type representing the primary table's column identifiers.</typeparam>
            <typeparam name="J">An enum type representing the joined table's column identifiers.</typeparam>
        </member>
        <member name="M:JunX.NETStandard.SQLBuilder.WhereClause`3.#ctor(`0,System.Text.StringBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:JunX.NETStandard.SQLBuilder.WhereClause`3"/> class, binding it to the parent SQL builder and the shared command buffer.
            </summary>
            <param name="parent">The parent SQL builder instance that this clause is attached to, enabling fluent chaining.</param>
            <param name="cmd">The <see cref="T:System.Text.StringBuilder"/> used to compose and accumulate the SQL command text.</param>
        </member>
        <member name="P:JunX.NETStandard.SQLBuilder.WhereClause`3.EndWhere">
            <summary>
            Ends the <c>WHERE</c> clause composition and returns control to the parent SQL builder for continued fluent chaining.
            </summary>
            <returns>The parent <typeparamref name="TCommand"/> instance.</returns>
        </member>
        <member name="M:JunX.NETStandard.SQLBuilder.WhereClause`3.Where(System.String)">
            <summary>
            Appends a SQL <c>WHERE</c> clause with the specified raw condition string to the command buffer.
            </summary>
            <param name="Condition">The raw SQL condition to include in the <c>WHERE</c> clause.</param>
            <returns>The current <see cref="T:JunX.NETStandard.SQLBuilder.WhereClause`3"/> instance for fluent chaining.</returns>
        </member>
        <member name="M:JunX.NETStandard.SQLBuilder.WhereClause`3.Where(`1,JunX.NETStandard.SQLBuilder.SQLOperator,System.String)">
            <summary>
            Appends a SQL <c>WHERE</c> clause using a column from the primary table, the specified operator, and comparison value.
            </summary>
            <param name="Left">The enum value representing the column name from the primary table.</param>
            <param name="Operator">The SQL operator used in the comparison (e.g., equals, less than).</param>
            <param name="Right">The value to compare against, represented as a string.</param>
            <returns>The current <see cref="T:JunX.NETStandard.SQLBuilder.WhereClause`3"/> instance for fluent chaining.</returns>
        </member>
        <member name="M:JunX.NETStandard.SQLBuilder.WhereClause`3.Where(`2,JunX.NETStandard.SQLBuilder.SQLOperator,System.String)">
            <summary>
            Appends a SQL <c>WHERE</c> clause using a column from the joined table, the specified operator, and comparison value.
            </summary>
            <param name="Left">The enum value representing the column name from the joined table.</param>
            <param name="Operator">The SQL operator used in the comparison.</param>
            <param name="Right">The value to compare against, represented as a string.</param>
            <returns>The current <see cref="T:JunX.NETStandard.SQLBuilder.WhereClause`3"/> instance for fluent chaining.</returns>
        </member>
        <member name="M:JunX.NETStandard.SQLBuilder.WhereClause`3.StartGroup(System.String)">
            <summary>
            Begins a grouped SQL condition by appending an opening parenthesis followed by the specified raw condition string.
            </summary>
            <param name="Condition">The raw SQL condition to start within the group.</param>
            <returns>The current <see cref="T:JunX.NETStandard.SQLBuilder.WhereClause`3"/> instance for fluent chaining.</returns>
        </member>
        <member name="M:JunX.NETStandard.SQLBuilder.WhereClause`3.StartGroup(`1,JunX.NETStandard.SQLBuilder.SQLOperator,System.String)">
            <summary>
            Begins a grouped SQL condition by appending an opening parenthesis followed by a comparison using a column from the primary table.
            </summary>
            <param name="Left">The enum value representing the column name from the primary table.</param>
            <param name="Operator">The SQL operator used in the comparison.</param>
            <param name="Right">The value to compare against, represented as a string.</param>
            <returns>The current <see cref="T:JunX.NETStandard.SQLBuilder.WhereClause`3"/> instance for fluent chaining.</returns>
        </member>
        <member name="M:JunX.NETStandard.SQLBuilder.WhereClause`3.StartGroup(`2,JunX.NETStandard.SQLBuilder.SQLOperator,System.String)">
            <summary>
            Begins a grouped SQL condition by appending an opening parenthesis followed by a comparison using a column from the joined table.
            </summary>
            <param name="Left">The enum value representing the column name from the joined table.</param>
            <param name="Operator">The SQL operator used in the comparison.</param>
            <param name="Right">The value to compare against, represented as a string.</param>
            <returns>The current <see cref="T:JunX.NETStandard.SQLBuilder.WhereClause`3"/> instance for fluent chaining.</returns>
        </member>
        <member name="P:JunX.NETStandard.SQLBuilder.WhereClause`3.EndGroup">
            <summary>
            Ends a grouped SQL condition by appending a closing parenthesis to the command buffer.
            </summary>
            <returns>The current <see cref="T:JunX.NETStandard.SQLBuilder.WhereClause`3"/> instance for fluent chaining.</returns>
        </member>
        <member name="M:JunX.NETStandard.SQLBuilder.WhereClause`3.And">
            <summary>
            Appends a SQL <c>AND</c> connector to the current <c>WHERE</c> clause, enabling composition of additional conditions across joined tables.
            </summary>
            <returns>The current <see cref="T:JunX.NETStandard.SQLBuilder.WhereClause`3"/> instance for fluent chaining.</returns>
        </member>
        <member name="M:JunX.NETStandard.SQLBuilder.WhereClause`3.And(System.String)">
            <summary>
            Appends a SQL <c>AND</c> condition to the current <c>WHERE</c> clause using the specified raw condition string.
            </summary>
            <param name="Condition">The raw SQL condition to append after the <c>AND</c> keyword.</param>
            <returns>The current <see cref="T:JunX.NETStandard.SQLBuilder.WhereClause`3"/> instance for fluent chaining.</returns>
        </member>
        <member name="M:JunX.NETStandard.SQLBuilder.WhereClause`3.And(`1,JunX.NETStandard.SQLBuilder.SQLOperator,System.String)">
            <summary>
            Appends a SQL <c>AND</c> condition to the current <c>WHERE</c> clause using a column from the primary table, the specified operator, and comparison value.
            </summary>
            <param name="Left">The enum value representing the column name from the primary table.</param>
            <param name="Operator">The SQL operator used in the comparison.</param>
            <param name="Right">The value to compare against, represented as a string.</param>
            <returns>The current <see cref="T:JunX.NETStandard.SQLBuilder.WhereClause`3"/> instance for fluent chaining.</returns>
        </member>
        <member name="M:JunX.NETStandard.SQLBuilder.WhereClause`3.And(`2,JunX.NETStandard.SQLBuilder.SQLOperator,System.String)">
            <summary>
            Appends a SQL <c>AND</c> condition to the current <c>WHERE</c> clause using a column from the joined table, the specified operator, and comparison value.
            </summary>
            <param name="Left">The enum value representing the column name from the joined table.</param>
            <param name="Operator">The SQL operator used in the comparison.</param>
            <param name="Right">The value to compare against, represented as a string.</param>
            <returns>The current <see cref="T:JunX.NETStandard.SQLBuilder.WhereClause`3"/> instance for fluent chaining.</returns>
        </member>
        <member name="M:JunX.NETStandard.SQLBuilder.WhereClause`3.Or">
            <summary>
            Appends a SQL <c>OR</c> connector to the current <c>WHERE</c> clause, enabling composition of alternative conditions across joined tables.
            </summary>
            <returns>The current <see cref="T:JunX.NETStandard.SQLBuilder.WhereClause`3"/> instance for fluent chaining.</returns>
        </member>
        <member name="M:JunX.NETStandard.SQLBuilder.WhereClause`3.Or(System.String)">
            <summary>
            Appends a SQL <c>OR</c> condition to the current <c>WHERE</c> clause using the specified raw condition string.
            </summary>
            <param name="Condition">The raw SQL condition to append after the <c>OR</c> keyword.</param>
            <returns>The current <see cref="T:JunX.NETStandard.SQLBuilder.WhereClause`3"/> instance for fluent chaining.</returns>
        </member>
        <member name="M:JunX.NETStandard.SQLBuilder.WhereClause`3.Or(`1,JunX.NETStandard.SQLBuilder.SQLOperator,System.String)">
            <summary>
            Appends a SQL <c>OR</c> condition to the current <c>WHERE</c> clause using a column from the primary table, the specified operator, and comparison value.
            </summary>
            <param name="Left">The enum value representing the column name from the primary table.</param>
            <param name="Operator">The SQL operator used in the comparison.</param>
            <param name="Right">The value to compare against, represented as a string.</param>
            <returns>The current <see cref="T:JunX.NETStandard.SQLBuilder.WhereClause`3"/> instance for fluent chaining.</returns>
        </member>
        <member name="M:JunX.NETStandard.SQLBuilder.WhereClause`3.Or(`2,JunX.NETStandard.SQLBuilder.SQLOperator,System.String)">
            <summary>
            Appends a SQL <c>OR</c> condition to the current <c>WHERE</c> clause using a column from the joined table, the specified operator, and comparison value.
            </summary>
            <param name="Left">The enum value representing the column name from the joined table.</param>
            <param name="Operator">The SQL operator used in the comparison.</param>
            <param name="Right">The value to compare against, represented as a string.</param>
            <returns>The current <see cref="T:JunX.NETStandard.SQLBuilder.WhereClause`3"/> instance for fluent chaining.</returns>
        </member>
        <member name="M:JunX.NETStandard.SQLBuilder.WhereClause`3.WhereBetween(`1,System.String,System.String)">
            <summary>
            Appends a SQL <c>WHERE</c> clause with a <c>BETWEEN</c> condition for the specified column and range.
            </summary>
            <param name="Column">The column to apply the <c>BETWEEN</c> filter to.</param>
            <param name="Left">The lower bound of the range, inserted as-is into the SQL statement.</param>
            <param name="Right">The upper bound of the range, inserted as-is into the SQL statement.</param>
            <returns>
            The current <see cref="T:JunX.NETStandard.SQLBuilder.WhereClause`3"/> instance with the appended <c>WHERE ... BETWEEN</c> clause.
            </returns>
            <remarks>
            This method constructs a SQL fragment in the form:
            <code>
            WHERE Column BETWEEN Left AND Right
            </code>
            It does not escape or quote values, and assumes the caller provides valid SQL-compatible strings.
            If a <c>WHERE</c> clause already exists, this method may produce invalid SQL unless manually adjusted.
            </remarks>
        </member>
        <member name="M:JunX.NETStandard.SQLBuilder.WhereClause`3.WhereBetween(`2,System.String,System.String)">
            <summary>
            Appends a SQL <c>WHERE</c> clause with a <c>BETWEEN</c> condition for the specified join column and range.
            </summary>
            <param name="Column">The join column to apply the <c>BETWEEN</c> filter to.</param>
            <param name="Left">The lower bound of the range, inserted directly into the SQL statement.</param>
            <param name="Right">The upper bound of the range, inserted directly into the SQL statement.</param>
            <returns>
            The current <see cref="T:JunX.NETStandard.SQLBuilder.WhereClause`3"/> instance with the appended <c>WHERE ... BETWEEN</c> clause.
            </returns>
            <remarks>
            This method constructs a SQL fragment in the form:
            <code>
            WHERE Column BETWEEN Left AND Right
            </code>
            It assumes no prior <c>WHERE</c> clause exists and does not escape or quote values.
            Use with caution when chaining multiple conditions or working with string/date values.
            </remarks>
        </member>
        <member name="M:JunX.NETStandard.SQLBuilder.WhereClause`3.Between(`1,System.String,System.String)">
            <summary>
            Appends a SQL <c>BETWEEN</c> clause for the specified column and range values.
            </summary>
            <param name="Column">The column to apply the <c>BETWEEN</c> condition to.</param>
            <param name="Left">The lower bound of the range, inserted directly into the SQL statement.</param>
            <param name="Right">The upper bound of the range, inserted directly into the SQL statement.</param>
            <returns>
            The current <see cref="T:JunX.NETStandard.SQLBuilder.WhereClause`3"/> instance with the appended <c>BETWEEN</c> clause.
            </returns>
            <remarks>
            This method constructs a SQL fragment in the form:
            <code>
            Column BETWEEN Left AND Right
            </code>
            It assumes that a <c>WHERE</c> or <c>AND</c> clause has already been appended.
            Values are inserted as-is, without quoting or escaping. Use with caution when working with strings or dates.
            </remarks>
        </member>
        <member name="M:JunX.NETStandard.SQLBuilder.WhereClause`3.Between(`2,System.String,System.String)">
            <summary>
            Appends a SQL <c>BETWEEN</c> clause for the specified join column and range values.
            </summary>
            <param name="Column">The join column to apply the <c>BETWEEN</c> condition to.</param>
            <param name="Left">The lower bound of the range, inserted directly into the SQL statement.</param>
            <param name="Right">The upper bound of the range, inserted directly into the SQL statement.</param>
            <returns>
            The current <see cref="T:JunX.NETStandard.SQLBuilder.WhereClause`3"/> instance with the appended <c>BETWEEN</c> clause.
            </returns>
            <remarks>
            This method constructs a SQL fragment in the form:
            <code>
            Column BETWEEN Left AND Right
            </code>
            It assumes that a <c>WHERE</c> or <c>AND</c> clause has already been appended.
            Values are inserted as-is, without quoting or escaping. Use with caution when working with strings or dates.
            </remarks>
        </member>
        <member name="T:JunX.NETStandard.SQLBuilder.WhereClause`2">
            <summary>
            Provides a fluent interface for composing SQL <c>WHERE</c> clauses, including logical operators and grouping, for use within generic SQL builder commands.
            </summary>
            <typeparam name="TCommand">The parent SQL builder type that this clause is attached to, enabling fluent chaining back to the command.</typeparam>
            <typeparam name="T">An enum type representing the schema or column identifiers used in the conditional expressions.</typeparam>
        </member>
        <member name="M:JunX.NETStandard.SQLBuilder.WhereClause`2.#ctor(`0,System.Text.StringBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:JunX.NETStandard.SQLBuilder.WhereClause`2"/> class, binding it to the parent SQL builder and the shared command buffer.
            </summary>
            <param name="parent">The parent SQL builder instance that this clause is attached to, enabling fluent chaining.</param>
            <param name="cmd">The <see cref="T:System.Text.StringBuilder"/> used to compose and accumulate the SQL command text.</param>
        </member>
        <member name="P:JunX.NETStandard.SQLBuilder.WhereClause`2.EndWhere">
            <summary>
            Ends the <c>WHERE</c> clause composition and returns control to the parent SQL builder for continued fluent chaining.
            </summary>
            <returns>The parent <typeparamref name="TCommand"/> instance.</returns>
        </member>
        <member name="M:JunX.NETStandard.SQLBuilder.WhereClause`2.Where(System.String)">
            <summary>
            Appends a SQL <c>WHERE</c> clause with the specified condition to the command buffer.
            </summary>
            <param name="Condition">The raw SQL condition to include in the <c>WHERE</c> clause.</param>
            <returns>The current <see cref="T:JunX.NETStandard.SQLBuilder.WhereClause`2"/> instance for fluent chaining.</returns>
        </member>
        <member name="M:JunX.NETStandard.SQLBuilder.WhereClause`2.Where(`1,JunX.NETStandard.SQLBuilder.SQLOperator,System.String)">
            <summary>
            Appends a SQL <c>WHERE</c> clause using the specified column, operator, and value.
            </summary>
            <param name="Left">The enum value representing the column name to compare.</param>
            <param name="Operator">The SQL operator used in the comparison (e.g., equals, greater than).</param>
            <param name="Right">The value to compare against, represented as a string.</param>
            <returns>The current <see cref="T:JunX.NETStandard.SQLBuilder.WhereClause`2"/> instance for fluent chaining.</returns>
        </member>
        <member name="M:JunX.NETStandard.SQLBuilder.WhereClause`2.StartGroup(System.String)">
            <summary>
            Begins a grouped SQL condition by appending an opening parenthesis followed by the specified condition.
            </summary>
            <param name="Condition">The condition to include within the opening of the group.</param>
            <returns>The current <see cref="T:JunX.NETStandard.SQLBuilder.WhereClause`2"/> instance for fluent chaining.</returns>
        </member>
        <member name="M:JunX.NETStandard.SQLBuilder.WhereClause`2.StartGroup(`1,JunX.NETStandard.SQLBuilder.SQLOperator,System.String)">
            <summary>
            Begins a grouped SQL condition by appending an opening parenthesis followed by a comparison using a column from the primary table.
            </summary>
            <param name="Left">The enum value representing the column name from the primary table.</param>
            <param name="Operator">The SQL operator used in the comparison.</param>
            <param name="Right">The value to compare against, represented as a string.</param>
            <returns>The current <see cref="T:JunX.NETStandard.SQLBuilder.WhereClause`2"/> instance for fluent chaining.</returns>
        </member>
        <member name="P:JunX.NETStandard.SQLBuilder.WhereClause`2.EndGroup">
            <summary>
            Appends a closing parenthesis to terminate a grouped SQL condition.
            </summary>
            <returns>The current <see cref="T:JunX.NETStandard.SQLBuilder.WhereClause`2"/> instance for fluent chaining.</returns>
        </member>
        <member name="M:JunX.NETStandard.SQLBuilder.WhereClause`2.And">
            <summary>
            Appends a SQL <c>AND</c> connector to the current <c>WHERE</c> clause, enabling composition of additional conditions.
            </summary>
            <returns>The current <see cref="T:JunX.NETStandard.SQLBuilder.WhereClause`2"/> instance for fluent chaining.</returns>
        </member>
        <member name="M:JunX.NETStandard.SQLBuilder.WhereClause`2.And(System.String)">
            <summary>
            Appends a SQL <c>AND</c> condition to the current <c>WHERE</c> clause using the specified raw condition string.
            </summary>
            <param name="Condition">The raw SQL condition to append after the <c>AND</c> keyword.</param>
            <returns>The current <see cref="T:JunX.NETStandard.SQLBuilder.WhereClause`2"/> instance for fluent chaining.</returns>
        </member>
        <member name="M:JunX.NETStandard.SQLBuilder.WhereClause`2.And(`1,JunX.NETStandard.SQLBuilder.SQLOperator,System.String)">
            <summary>
            Appends a SQL <c>AND</c> condition to the current <c>WHERE</c> clause using the specified column, operator, and value.
            </summary>
            <param name="Left">The enum value representing the column name to compare.</param>
            <param name="Operator">The SQL operator used in the comparison.</param>
            <param name="Right">The value to compare against, represented as a string.</param>
            <returns>The current <see cref="T:JunX.NETStandard.SQLBuilder.WhereClause`2"/> instance for fluent chaining.</returns>
        </member>
        <member name="M:JunX.NETStandard.SQLBuilder.WhereClause`2.Or">
            <summary>
            Appends a SQL <c>OR</c> connector to the current <c>WHERE</c> clause, enabling composition of alternative conditions.
            </summary>
            <returns>The current <see cref="T:JunX.NETStandard.SQLBuilder.WhereClause`2"/> instance for fluent chaining.</returns>
        </member>
        <member name="M:JunX.NETStandard.SQLBuilder.WhereClause`2.Or(System.String)">
            <summary>
            Appends a SQL <c>OR</c> condition to the current <c>WHERE</c> clause using the specified raw condition string.
            </summary>
            <param name="Condition">The raw SQL condition to append after the <c>OR</c> keyword.</param>
            <returns>The current <see cref="T:JunX.NETStandard.SQLBuilder.WhereClause`2"/> instance for fluent chaining.</returns>
        </member>
        <member name="M:JunX.NETStandard.SQLBuilder.WhereClause`2.Or(`1,JunX.NETStandard.SQLBuilder.SQLOperator,System.String)">
            <summary>
            Appends a SQL <c>OR</c> condition to the current <c>WHERE</c> clause using the specified column, operator, and value.
            </summary>
            <param name="Left">The enum value representing the column name to compare.</param>
            <param name="Operator">The SQL operator used in the comparison.</param>
            <param name="Right">The value to compare against, represented as a string.</param>
            <returns>The current <see cref="T:JunX.NETStandard.SQLBuilder.WhereClause`2"/> instance for fluent chaining.</returns>
        </member>
        <member name="M:JunX.NETStandard.SQLBuilder.WhereClause`2.WhereBetween(`1,System.String,System.String)">
            <summary>
            Appends a SQL <c>WHERE</c> clause that filters the specified column between two values.
            </summary>
            <param name="Column">The column to apply the <c>BETWEEN</c> condition to.</param>
            <param name="Left">The lower bound of the range.</param>
            <param name="Right">The upper bound of the range.</param>
            <returns>
            The current <see cref="T:JunX.NETStandard.SQLBuilder.WhereClause`2"/> instance with the appended <c>WHERE ... BETWEEN</c> clause.
            </returns>
            <remarks>
            This method constructs a SQL fragment in the form:
            <code>
            WHERE Column BETWEEN Left AND Right
            </code>
            It does not escape or quote values, and assumes the caller provides valid SQL-compatible strings.
            If a <c>WHERE</c> clause already exists, this method may produce invalid SQL unless manually adjusted.
            </remarks>
        </member>
        <member name="M:JunX.NETStandard.SQLBuilder.WhereClause`2.Between(`1,System.String,System.String)">
            <summary>
            Appends a SQL <c>BETWEEN</c> clause for the specified column and range values.
            </summary>
            <param name="Column">The column to apply the <c>BETWEEN</c> condition to.</param>
            <param name="Left">The lower bound of the range.</param>
            <param name="Right">The upper bound of the range.</param>
            <returns>
            The current <see cref="T:JunX.NETStandard.SQLBuilder.WhereClause`2"/> instance with the appended <c>BETWEEN</c> clause.
            </returns>
            <remarks>
            This method constructs a SQL fragment in the form:
            <code>
            Column BETWEEN Left AND Right
            </code>
            It assumes the caller has already appended a <c>WHERE</c> or <c>AND</c> clause if needed.
            Values are inserted as-is, without quoting or escaping. Use with caution for strings or dates.
            </remarks>
        </member>
        <member name="T:JunX.NETStandard.SQLBuilder.WhereClause`1">
            <summary>
            Provides a fluent interface for composing SQL <c>WHERE</c> clauses using raw condition strings and logical operators.
            </summary>
            <typeparam name="TCommand">
            The parent SQL builder type that this clause is attached to, enabling fluent chaining.
            </typeparam>
        </member>
        <member name="M:JunX.NETStandard.SQLBuilder.WhereClause`1.#ctor(`0,System.Text.StringBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:JunX.NETStandard.SQLBuilder.WhereClause`1"/> class with the specified parent builder and command buffer.
            </summary>
            <param name="parent">The parent SQL builder instance to return to after clause composition.</param>
            <param name="cmd">The <see cref="T:System.Text.StringBuilder"/> used to construct the SQL command.</param>
        </member>
        <member name="P:JunX.NETStandard.SQLBuilder.WhereClause`1.EndWhere">
            <summary>
            Ends the <c>WHERE</c> clause composition and returns control to the parent SQL builder for continued fluent chaining.
            </summary>
            <returns>The parent <typeparamref name="TCommand"/> instance.</returns>
        </member>
        <member name="M:JunX.NETStandard.SQLBuilder.WhereClause`1.Where(System.String)">
            <summary>
            Appends a SQL <c>WHERE</c> clause with the specified raw condition string to the command buffer.
            </summary>
            <param name="Condition">The raw SQL condition to include in the <c>WHERE</c> clause.</param>
            <returns>The current <see cref="T:JunX.NETStandard.SQLBuilder.WhereClause`1"/> instance for fluent chaining.</returns>
        </member>
        <member name="M:JunX.NETStandard.SQLBuilder.WhereClause`1.StartGroup(System.String)">
            <summary>
            Begins a grouped SQL condition by appending an opening parenthesis followed by the specified raw condition string.
            </summary>
            <param name="Condition">The raw SQL condition to start within the group.</param>
            <returns>The current <see cref="T:JunX.NETStandard.SQLBuilder.WhereClause`1"/> instance for fluent chaining.</returns>
        </member>
        <member name="P:JunX.NETStandard.SQLBuilder.WhereClause`1.EndGroup">
            <summary>
            Ends a grouped SQL condition by appending a closing parenthesis to the command buffer.
            </summary>
            <returns>The current <see cref="T:JunX.NETStandard.SQLBuilder.WhereClause`1"/> instance for fluent chaining.</returns>
        </member>
        <member name="M:JunX.NETStandard.SQLBuilder.WhereClause`1.And">
            <summary>
            Appends a SQL <c>AND</c> connector to the current <c>WHERE</c> clause, enabling composition of additional conditions.
            </summary>
            <returns>The current <see cref="T:JunX.NETStandard.SQLBuilder.WhereClause`1"/> instance for fluent chaining.</returns>
        </member>
        <member name="M:JunX.NETStandard.SQLBuilder.WhereClause`1.And(System.String)">
            <summary>
            Appends a SQL <c>AND</c> condition to the current <c>WHERE</c> clause using the specified raw condition string.
            </summary>
            <param name="Condition">The raw SQL condition to append after the <c>AND</c> keyword.</param>
            <returns>The current <see cref="T:JunX.NETStandard.SQLBuilder.WhereClause`1"/> instance for fluent chaining.</returns>
        </member>
        <member name="M:JunX.NETStandard.SQLBuilder.WhereClause`1.Or">
            <summary>
            Appends a SQL <c>OR</c> connector to the current <c>WHERE</c> clause, enabling composition of alternative conditions.
            </summary>
            <returns>The current <see cref="T:JunX.NETStandard.SQLBuilder.WhereClause`1"/> instance for fluent chaining.</returns>
        </member>
        <member name="M:JunX.NETStandard.SQLBuilder.WhereClause`1.Or(System.String)">
            <summary>
            Appends a SQL <c>OR</c> condition to the current <c>WHERE</c> clause using the specified raw condition string.
            </summary>
            <param name="Condition">The raw SQL condition to append after the <c>OR</c> keyword.</param>
            <returns>The current <see cref="T:JunX.NETStandard.SQLBuilder.WhereClause`1"/> instance for fluent chaining.</returns>
        </member>
        <member name="T:JunX.NETStandard.Utility.EnumHelper`1">
            <summary>
            Provides static utility methods for working with enum types, including name extraction and metadata access.
            </summary>
            <typeparam name="T">
            The enum type to operate on. Must be a valid <see cref="T:System.Enum"/>.
            </typeparam>
            <remarks>
            This generic helper class enables type-safe reflection over enum members, allowing operations like listing names or values.
            It is designed for scenarios where enum metadata needs to be accessed without relying on instance context.
            </remarks>
        </member>
        <member name="M:JunX.NETStandard.Utility.EnumHelper`1.ToList">
            <summary>
            Returns a list of all member names defined in the enum type <typeparamref name="T"/>.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.List`1"/> containing the names of each enum member in declaration order.
            </returns>
            <remarks>
            This method uses <see cref="M:System.Enum.GetNames(System.Type)"/> to extract the member names of the specified enum type <typeparamref name="T"/>.
            It is useful for generating dropdowns, validation lists, or metadata-driven UI elements based on enum definitions.
            </remarks>
        </member>
        <member name="M:JunX.NETStandard.Utility.EnumHelper`1.Name">
            <summary>
            Returns the simple name of the enum type <typeparamref name="T"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> representing the type name of the enum, without namespace or qualifiers.
            </returns>
            <remarks>
            This method uses <c>typeof(T).Name</c> to extract the unqualified name of the enum type.
            Useful for generating SQL table names, logging, or metadata tagging based on enum identity.
            </remarks>
        </member>
        <member name="M:JunX.NETStandard.Utility.EnumHelper`1.GetEnumValue(System.String,System.Char,System.Char)">
            <summary>
            Converts a human-readable string into its corresponding enum value of type <typeparamref name="T"/>.
            Replaces the specified <paramref name="ReadableValueDelimiter"/> with <paramref name="EnumDelimiter"/> to match the enum's internal format,
            then parses the result against the available enum values returned by <c>ToList()</c>.
            Throws an exception if no matching enum value is found.
            </summary>
            <param name="ReadableValue">The input string representing the enum value in a readable format.</param>
            <param name="ReadableValueDelimiter">The delimiter used in the readable string format.</param>
            <param name="EnumDelimiter">The delimiter used in the actual enum value format.</param>
            <returns>The parsed enum value of type <typeparamref name="T"/>.</returns>
            <exception cref="T:System.Exception">Thrown when the formatted string does not match any known enum value.</exception>
        </member>
        <member name="M:JunX.NETStandard.Utility.EnumHelper`1.GetReadableValue(`0,System.Char)">
            <summary>
            Converts an enum value of type <typeparamref name="T"/> into a human-readable string by replacing the specified delimiter with spaces.
            Useful for displaying enum values in UI or reports with improved clarity.
            </summary>
            <param name="EnumValue">The enum value to convert.</param>
            <param name="EnumValueDelimiter">The delimiter used in the enum's internal format (e.g., underscore or hyphen).</param>
            <returns>A human-readable string representation of the enum value.</returns>
        </member>
        <member name="M:JunX.NETStandard.Utility.EnumHelper`1.GetReadableValues(System.Char)">
            <summary>
            Converts a sequence of enum values into a list of human-readable strings by replacing delimiter characters.
            Useful for displaying enum values in UI or reports with improved readability.
            </summary>
            <typeparam name="T">The enum type to process.</typeparam>
            <param name="EnumValues">The collection of enum values to convert.</param>
            <param name="EnumValueDelimiter">The character used in enum names that should be replaced with a space.</param>
            <returns>
            A list of strings where each enum value has its delimiters replaced with spaces for readability.
            </returns>
        </member>
        <member name="T:JunX.NETStandard.Utility.Logger">
            <summary>
            Provides basic logging functionality for structured CSV-style log files, including file creation and entry appending.
            </summary>
            <remarks>
            This class writes logs in the format <c>Date/Time,Category,Details</c> to a specified file path.
            It supports checking for file existence, generating a header row, and appending timestamped log entries.
            Intended for use in .NET applications requiring lightweight, file-based logging.
            </remarks>
        </member>
        <member name="M:JunX.NETStandard.Utility.Logger.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:JunX.NETStandard.Utility.Logger"/> class with the specified log file path.
            </summary>
            <param name="LogPath">The full file path where log entries will be written.</param>
            <remarks>
            This constructor sets the internal log path used by all logging operations. The path should be valid and writable.
            </remarks>
        </member>
        <member name="M:JunX.NETStandard.Utility.Logger.LogFileExists">
            <summary>
            Determines whether the log file exists at the configured path.
            </summary>
            <returns><c>true</c> if the log file exists; otherwise, <c>false</c>.</returns>
            <remarks>
            This method checks the presence of the log file using the current internal path. It does not validate file contents.
            </remarks>
        </member>
        <member name="M:JunX.NETStandard.Utility.Logger.CreateLogFile">
            <summary>
            Creates a new log file at the configured path with a CSV-style header row.
            </summary>
            <remarks>
            This method writes the header <c>Date/Time,Category,Details</c> to the log file. If the file already exists,
            the header will be appended, potentially duplicating it. Use <see cref="M:JunX.NETStandard.Utility.Logger.LogFileExists"/> to check existence before calling.
            </remarks>
        </member>
        <member name="M:JunX.NETStandard.Utility.Logger.AddLog(System.DateTime,System.String,System.String)">
            <summary>
            Appends a new log entry to the log file using the specified timestamp, category, and detail message.
            </summary>
            <param name="LogDateTime">The date and time of the log entry.</param>
            <param name="Category">The category or label describing the log context (e.g., "Info", "Error").</param>
            <param name="Details">The detailed message or description of the log event.</param>
            <remarks>
            The log entry is written in CSV format as <c>MM/dd/yyyy - HH:mm:ss,Category,Details</c>, followed by a newline.
            This method assumes the log file path has been initialized and is writable.
            </remarks>
        </member>
        <member name="T:JunX.NETStandard.Utility.StructHelper`1">
            <summary>
            Provides a centralized set of utility methods for working with value-type instances of <typeparamref name="T"/>.
            Designed to support structural comparison, inspection, and future extensibility for common operations on structs.
            </summary>
            <typeparam name="T">
            The value type (struct) to operate on. Must be a non-nullable struct.
            </typeparam>
        </member>
        <member name="M:JunX.NETStandard.Utility.StructHelper`1.AreEqual(`0,`0)">
            <summary>
            Determines whether two instances of <typeparamref name="T"/> are equal by comparing the values of all public properties.
            Uses reflection to perform a shallow, property-level comparison.
            </summary>
            <param name="Left">The first struct instance to compare.</param>
            <param name="Right">The second struct instance to compare.</param>
            <returns>
            <c>true</c> if all public property values are equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:JunX.NETStandard.Utility.Utility.HexToRGB(System.String)">
            <summary>
            Converts a 6-digit hexadecimal color string into a <see cref="T:System.Drawing.Color"/> instance usable in WinForms.
            </summary>
            <param name="Hex">A hex color string with or without a leading <c>#</c>, such as <c>#FF5733</c> or <c>FF5733</c>.</param>
            <returns>A <see cref="T:System.Drawing.Color"/> object representing the RGB equivalent of the hex value.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the input is null, empty, or not a valid 6-digit hex color.</exception>
            <remarks>
            This method is intended for use in Windows Forms applications targeting .NET 8.0 with <c>System.Drawing</c> support.
            It does not support shorthand hex formats (e.g., <c>#FFF</c>) or alpha channels. For extended color parsing,
            consider adding support for 8-digit hex values or using a dedicated color utility library.
            </remarks>
        </member>
        <member name="T:JunX.NETStandard.XML.RDLCReader">
            <summary>
            Reads RDLC files.
            </summary>
        </member>
        <member name="M:JunX.NETStandard.XML.RDLCReader.RDLC_ToEnumFile(System.String,System.String)">
            <summary>
            Generates a C# <c>enum</c> file from the list of <c>ReportParameter</c> names defined in an RDLC report.
            </summary>
            <param name="RDLCPath">The full path to the RDLC file to parse.</param>
            <param name="SavePath">The destination path where the generated enum file will be saved.</param>
            <remarks>
            This method loads the RDLC file as XML, extracts all unique <c>ReportParameter</c> names,
            sanitizes them into valid C# identifiers, and writes them as members of a public enum.
            The enum name is derived from the exported C# file name (excluding extension).
            <para>
            Example: If <paramref name="RDLCPath"/> is <c>InvoiceReport.rdlc</c>, the output will be:
            <code>
            public enum InvoiceReport
            {
                StartDate,
                EndDate,
                IncludeLogo
            }
            </code>
            </para>
            Each enum member is comma-separated except the last, ensuring valid syntax.
            </remarks>
            <exception cref="T:System.IO.FileNotFoundException">
            Thrown when the RDLC file does not exist at the specified <paramref name="RDLCPath"/>.
            </exception>
        </member>
        <member name="T:JunX.NETStandard.XML.JunXML">
            <summary>
            Provides utility methods for loading, reading, and modifying XML configuration files using <see cref="T:System.Xml.Linq.XDocument"/>.
            </summary>
            <remarks>
            This class supports both file-based and in-memory XML operations, typically targeting configuration structures with <c>&lt;add key="..." value="..." /&gt;</c> elements.
            Future extensions may include support for nested sections, attribute-based filtering, and schema validation.
            </remarks>
        </member>
        <member name="M:JunX.NETStandard.XML.JunXML.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:JunX.NETStandard.XML.JunXML"/> class using the specified configuration file path.
            </summary>
            <param name="ConfigPath">The full path to the XML configuration file to be loaded and modified.</param>
            <remarks>
            This constructor sets the internal path reference but does not automatically load the document.
            Call <see cref="M:JunX.NETStandard.XML.JunXML.Load"/> to parse the XML content from the specified path.
            </remarks>
        </member>
        <member name="M:JunX.NETStandard.XML.JunXML.#ctor(System.Xml.Linq.XDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:JunX.NETStandard.XML.JunXML"/> class using the specified <see cref="T:System.Xml.Linq.XDocument"/>.
            </summary>
            <param name="Document">An in-memory XML document to be used for reading and modification.</param>
            <remarks>
            This constructor allows direct manipulation of an existing <see cref="T:System.Xml.Linq.XDocument"/> without relying on file-based loading.
            Useful for scenarios involving dynamic XML generation, testing, or runtime configuration overrides.
            </remarks>
        </member>
        <member name="P:JunX.NETStandard.XML.JunXML.ConfigPath">
            <summary>
            Gets the file path of the XML configuration source associated with this instance.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the full path to the XML configuration file.
            </value>
            <remarks>
            This property is only populated when the instance is constructed using the <c>ConfigPath</c> constructor.
            It remains <c>null</c> if the instance was initialized with an <see cref="T:System.Xml.Linq.XDocument"/> instead.
            </remarks>
        </member>
        <member name="P:JunX.NETStandard.XML.JunXML.Document">
            <summary>
            Gets the underlying <see cref="T:System.Xml.Linq.XDocument"/> instance associated with this XML handler.
            </summary>
            <value>
            An <see cref="T:System.Xml.Linq.XDocument"/> representing the loaded or injected XML content.
            </value>
            <remarks>
            This property provides direct access to the in-memory XML structure for advanced querying, transformation, or inspection.
            It may be <c>null</c> if the document has not been loaded or initialized.
            </remarks>
        </member>
        <member name="M:JunX.NETStandard.XML.JunXML.Load">
            <summary>
            Loads the XML document from the configured file path and returns the current <see cref="N:JunX.NETStandard.XML"/> instance.
            </summary>
            <returns>
            The same <see cref="N:JunX.NETStandard.XML"/> instance, allowing fluent chaining of subsequent operations.
            </returns>
            <remarks>
            This method parses the XML content located at <see cref="P:JunX.NETStandard.XML.JunXML.ConfigPath"/> and assigns it to the <see cref="P:JunX.NETStandard.XML.JunXML.Document"/> property.
            It enables fluent usage patterns such as <c>new XML(path).Load().ReadAdd("key")</c>.
            </remarks>
            <exception cref="T:System.Exception">
            Thrown when the XML file cannot be loaded due to I/O errors, invalid format, or access restrictions.
            </exception>
        </member>
        <member name="M:JunX.NETStandard.XML.JunXML.ReadAdd(System.String)">
            <summary>
            Retrieves the value of an <c>&lt;add&gt;</c> element with the specified key from the loaded XML document.
            </summary>
            <param name="Key">The value of the <c>key</c> attribute to search for.</param>
            <returns>
            A <see cref="T:System.String"/> containing the corresponding <c>value</c> attribute of the matched <c>&lt;add&gt;</c> element.
            </returns>
            <remarks>
            This method searches for an element in the form:
            <code>
            &lt;add key="..." value="..." /&gt;
            </code>
            If the element or attribute is missing, an <see cref="T:System.Exception"/> is thrown with a descriptive error message.
            </remarks>
            <exception cref="T:System.Exception">
            Thrown when the target element or attribute cannot be found or accessed.
            </exception>
        </member>
        <member name="M:JunX.NETStandard.XML.JunXML.ChangeAddValue(System.String,System.String)">
            <summary>
            Updates the <c>value</c> attribute of an <c>&lt;add&gt;</c> element with the specified key in the loaded XML document.
            </summary>
            <param name="Key">The value of the <c>key</c> attribute to locate the target element.</param>
            <param name="Value">The new value to assign to the <c>value</c> attribute.</param>
            <remarks>
            This method searches for an element in the form:
            <code>
            &lt;add key="..." value="..." /&gt;
            </code>
            If found, it updates the <c>value</c> attribute and saves the document back to <see cref="P:JunX.NETStandard.XML.JunXML.ConfigPath"/>.
            </remarks>
            <exception cref="T:System.Exception">
            Thrown when the XML document cannot be saved due to I/O errors, access restrictions, or invalid path configuration.
            </exception>
        </member>
    </members>
</doc>
